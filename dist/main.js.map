{"version":3,"file":"main.js","sources":["webpack://storm-react-diagrams/webpack/universalModuleDefinition","webpack://storm-react-diagrams/webpack/bootstrap","webpack://storm-react-diagrams/./src/BaseEntity.ts","webpack://storm-react-diagrams/./src/DiagramEngine.ts","webpack://storm-react-diagrams/./src/Toolkit.ts","webpack://storm-react-diagrams/./src/actions/BaseAction.ts","webpack://storm-react-diagrams/./src/actions/MoveCanvasAction.ts","webpack://storm-react-diagrams/./src/actions/MoveItemsAction.ts","webpack://storm-react-diagrams/./src/actions/SelectingAction.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultLabelFactory.tsx","webpack://storm-react-diagrams/./src/defaults/factories/DefaultLinkFactory.tsx","webpack://storm-react-diagrams/./src/defaults/factories/DefaultNodeFactory.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultPortFactory.tsx","webpack://storm-react-diagrams/./src/defaults/models/DefaultLabelModel.tsx","webpack://storm-react-diagrams/./src/defaults/models/DefaultLinkModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultNodeModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultPortModel.ts","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultLabelWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultLinkWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultNodeWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultPortLabelWidget.tsx","webpack://storm-react-diagrams/./src/factories/AbstractFactory.ts","webpack://storm-react-diagrams/./src/factories/AbstractLabelFactory.ts","webpack://storm-react-diagrams/./src/factories/AbstractLinkFactory.ts","webpack://storm-react-diagrams/./src/factories/AbstractNodeFactory.ts","webpack://storm-react-diagrams/./src/factories/AbstractPortFactory.ts","webpack://storm-react-diagrams/./src/main.ts","webpack://storm-react-diagrams/./src/models/BaseModel.ts","webpack://storm-react-diagrams/./src/models/DiagramModel.ts","webpack://storm-react-diagrams/./src/models/LabelModel.ts","webpack://storm-react-diagrams/./src/models/LinkModel.ts","webpack://storm-react-diagrams/./src/models/NodeModel.ts","webpack://storm-react-diagrams/./src/models/PointModel.ts","webpack://storm-react-diagrams/./src/models/PortModel.ts","webpack://storm-react-diagrams/./src/routing/PathFinding.ts","webpack://storm-react-diagrams/./src/widgets/BaseWidget.tsx","webpack://storm-react-diagrams/./src/widgets/DiagramWidget.tsx","webpack://storm-react-diagrams/./src/widgets/LinkWidget.tsx","webpack://storm-react-diagrams/./src/widgets/NodeWidget.tsx","webpack://storm-react-diagrams/./src/widgets/PortWidget.tsx","webpack://storm-react-diagrams/./src/widgets/layers/LinkLayerWidget.tsx","webpack://storm-react-diagrams/./src/widgets/layers/NodeLayerWidget.tsx","webpack://storm-react-diagrams/external \"closest\"","webpack://storm-react-diagrams/external \"lodash\"","webpack://storm-react-diagrams/external \"pathfinding\"","webpack://storm-react-diagrams/external \"paths-js/path\"","webpack://storm-react-diagrams/external \"react\""],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"storm-react-diagrams\"] = factory();\n\telse\n\t\troot[\"storm-react-diagrams\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.ts\");\n","import { Toolkit } from \"./Toolkit\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"./DiagramEngine\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport interface BaseEvent<T extends BaseEntity = any> {\r\n\tentity: BaseEntity<BaseListener>;\r\n\tstopPropagation: () => any;\r\n\tfiring: boolean;\r\n\tid: string;\r\n}\r\n\r\nexport interface BaseListener<T extends BaseEntity = any> {\r\n\tlockChanged?(event: BaseEvent<T> & { locked: boolean }): void;\r\n}\r\n\r\nexport type BaseEntityType = \"node\" | \"link\" | \"port\" | \"point\";\r\n\r\nexport class BaseEntity<T extends BaseListener = BaseListener> {\r\n\tpublic listeners: { [s: string]: T };\r\n\tpublic id: string;\r\n\tpublic locked: boolean;\r\n\r\n\tconstructor(id?: string) {\r\n\t\tthis.listeners = {};\r\n\t\tthis.id = id || Toolkit.UID();\r\n\t\tthis.locked = false;\r\n\t}\r\n\r\n\tgetID() {\r\n\t\treturn this.id;\r\n\t}\r\n\r\n\tdoClone(lookupTable: { [s: string]: any } = {}, clone: any) {\r\n\t\t/*noop*/\r\n\t}\r\n\r\n\tclone(lookupTable: { [s: string]: any } = {}) {\r\n\t\t// try and use an existing clone first\r\n\t\tif (lookupTable[this.id]) {\r\n\t\t\treturn lookupTable[this.id];\r\n\t\t}\r\n\t\tlet clone = _.clone(this);\r\n\t\tclone.id = Toolkit.UID();\r\n\t\tclone.clearListeners();\r\n\t\tlookupTable[this.id] = clone;\r\n\r\n\t\tthis.doClone(lookupTable, clone);\r\n\t\treturn clone;\r\n\t}\r\n\r\n\tclearListeners() {\r\n\t\tthis.listeners = {};\r\n\t}\r\n\r\n\tpublic deSerialize(data: { [s: string]: any }, engine: DiagramEngine) {\r\n\t\tthis.id = data.id;\r\n\t}\r\n\r\n\tpublic serialize() {\r\n\t\treturn {\r\n\t\t\tid: this.id\r\n\t\t};\r\n\t}\r\n\r\n\tpublic iterateListeners(cb: (t: T, event: BaseEvent) => any) {\r\n\t\tlet event: BaseEvent = {\r\n\t\t\tid: Toolkit.UID(),\r\n\t\t\tfiring: true,\r\n\t\t\tentity: this,\r\n\t\t\tstopPropagation: () => {\r\n\t\t\t\tevent.firing = false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfor (var i in this.listeners) {\r\n\t\t\tif (this.listeners.hasOwnProperty(i)) {\r\n\t\t\t\t// propagation stopped\r\n\t\t\t\tif (!event.firing) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcb(this.listeners[i], event);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic removeListener(listener: string) {\r\n\t\tif (this.listeners[listener]) {\r\n\t\t\tdelete this.listeners[listener];\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic addListener(listener: T): string {\r\n\t\tvar uid = Toolkit.UID();\r\n\t\tthis.listeners[uid] = listener;\r\n\t\treturn uid;\r\n\t}\r\n\r\n\tpublic isLocked(): boolean {\r\n\t\treturn this.locked;\r\n\t}\r\n\r\n\tpublic setLocked(locked: boolean = true) {\r\n\t\tthis.locked = locked;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.lockChanged) {\r\n\t\t\t\tlistener.lockChanged({ ...event, locked: locked });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","import { BaseEntity, BaseListener } from \"./BaseEntity\";\r\nimport { DiagramModel } from \"./models/DiagramModel\";\r\nimport * as _ from \"lodash\";\r\nimport { BaseModel, BaseModelListener } from \"./models/BaseModel\";\r\nimport { NodeModel } from \"./models/NodeModel\";\r\nimport { PointModel } from \"./models/PointModel\";\r\nimport { PortModel } from \"./models/PortModel\";\r\nimport { LinkModel } from \"./models/LinkModel\";\r\nimport { AbstractLabelFactory } from \"./factories/AbstractLabelFactory\";\r\nimport { AbstractLinkFactory } from \"./factories/AbstractLinkFactory\";\r\nimport { AbstractNodeFactory } from \"./factories/AbstractNodeFactory\";\r\nimport { AbstractPortFactory } from \"./factories/AbstractPortFactory\";\r\nimport { DefaultLinkFactory, DefaultNodeFactory } from \"./main\";\r\nimport { ROUTING_SCALING_FACTOR } from \"./routing/PathFinding\";\r\nimport { DefaultPortFactory } from \"./defaults/factories/DefaultPortFactory\";\r\nimport { LabelModel } from \"./models/LabelModel\";\r\nimport { DefaultLabelFactory } from \"./defaults/factories/DefaultLabelFactory\";\r\nimport { Toolkit } from \"./Toolkit\";\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport interface DiagramEngineListener extends BaseListener {\r\n\tportFactoriesUpdated?(): void;\r\n\r\n\tnodeFactoriesUpdated?(): void;\r\n\r\n\tlinkFactoriesUpdated?(): void;\r\n\r\n\tlabelFactoriesUpdated?(): void;\r\n\r\n\trepaintCanvas?(): void;\r\n}\r\n\r\n/**\r\n * Passed as a parameter to the DiagramWidget\r\n */\r\nexport class DiagramEngine extends BaseEntity<DiagramEngineListener> {\r\n\tnodeFactories: { [s: string]: AbstractNodeFactory };\r\n\tlinkFactories: { [s: string]: AbstractLinkFactory };\r\n\tportFactories: { [s: string]: AbstractPortFactory };\r\n\tlabelFactories: { [s: string]: AbstractLabelFactory };\r\n\r\n\tdiagramModel: DiagramModel;\r\n\tcanvas: Element;\r\n\tpaintableWidgets: {};\r\n\tlinksThatHaveInitiallyRendered: {};\r\n\tnodesRendered: boolean;\r\n\tmaxNumberPointsPerLink: number;\r\n\tsmartRouting: boolean;\r\n\r\n\t// calculated only when smart routing is active\r\n\tcanvasMatrix: number[][] = [];\r\n\troutingMatrix: number[][] = [];\r\n\t// used when at least one element has negative coordinates\r\n\thAdjustmentFactor: number = 0;\r\n\tvAdjustmentFactor: number = 0;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.diagramModel = new DiagramModel();\r\n\t\tthis.nodeFactories = {};\r\n\t\tthis.linkFactories = {};\r\n\t\tthis.portFactories = {};\r\n\t\tthis.labelFactories = {};\r\n\t\tthis.canvas = null;\r\n\t\tthis.paintableWidgets = null;\r\n\t\tthis.linksThatHaveInitiallyRendered = {};\r\n\r\n\t\tif (Toolkit.TESTING) {\r\n\t\t\tToolkit.TESTING_UID = 0;\r\n\r\n\t\t\t//pop it onto the window so our E2E helpers can find it\r\n\t\t\tif (window) {\r\n\t\t\t\t(window as any)[\"diagram_instance\"] = this;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tinstallDefaultFactories() {\r\n\t\tthis.registerNodeFactory(new DefaultNodeFactory());\r\n\t\tthis.registerLinkFactory(new DefaultLinkFactory());\r\n\t\tthis.registerPortFactory(new DefaultPortFactory());\r\n\t\tthis.registerLabelFactory(new DefaultLabelFactory());\r\n\t}\r\n\r\n\trepaintCanvas() {\r\n\t\tthis.iterateListeners(listener => {\r\n\t\t\tif (listener.repaintCanvas) {\r\n\t\t\t\tlistener.repaintCanvas();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tclearRepaintEntities() {\r\n\t\tthis.paintableWidgets = null;\r\n\t}\r\n\r\n\tenableRepaintEntities(entities: BaseModel<BaseEntity, BaseModelListener>[]) {\r\n\t\tthis.paintableWidgets = {};\r\n\t\tentities.forEach(entity => {\r\n\t\t\t//if a node is requested to repaint, add all of its links\r\n\t\t\tif (entity instanceof NodeModel) {\r\n\t\t\t\t_.forEach(entity.getPorts(), port => {\r\n\t\t\t\t\t_.forEach(port.getLinks(), link => {\r\n\t\t\t\t\t\tthis.paintableWidgets[link.getID()] = true;\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (entity instanceof PointModel) {\r\n\t\t\t\tthis.paintableWidgets[entity.getLink().getID()] = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.paintableWidgets[entity.getID()] = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks to see if a model is locked by running through\r\n\t * its parents to see if they are locked first\r\n\t */\r\n\tisModelLocked(model: BaseEntity<BaseListener>) {\r\n\t\t//always check the diagram model\r\n\t\tif (this.diagramModel.isLocked()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn model.isLocked();\r\n\t}\r\n\r\n\trecalculatePortsVisually() {\r\n\t\tthis.nodesRendered = false;\r\n\t\tthis.linksThatHaveInitiallyRendered = {};\r\n\t}\r\n\r\n\tcanEntityRepaint(baseModel: BaseModel<BaseEntity, BaseModelListener>) {\r\n\t\t//no rules applied, allow repaint\r\n\t\tif (this.paintableWidgets === null) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn this.paintableWidgets[baseModel.getID()] !== undefined;\r\n\t}\r\n\r\n\tsetCanvas(canvas: Element | null) {\r\n\t\tthis.canvas = canvas;\r\n\t}\r\n\r\n\tsetDiagramModel(model: DiagramModel) {\r\n\t\tthis.diagramModel = model;\r\n\t\tthis.recalculatePortsVisually();\r\n\t}\r\n\r\n\tgetDiagramModel(): DiagramModel {\r\n\t\treturn this.diagramModel;\r\n\t}\r\n\r\n\t//!-------------- FACTORIES ------------\r\n\r\n\tgetNodeFactories(): { [s: string]: AbstractNodeFactory } {\r\n\t\treturn this.nodeFactories;\r\n\t}\r\n\r\n\tgetLinkFactories(): { [s: string]: AbstractLinkFactory } {\r\n\t\treturn this.linkFactories;\r\n\t}\r\n\r\n\tgetLabelFactories(): { [s: string]: AbstractLabelFactory } {\r\n\t\treturn this.labelFactories;\r\n\t}\r\n\r\n\tregisterLabelFactory(factory: AbstractLabelFactory) {\r\n\t\tthis.labelFactories[factory.getType()] = factory;\r\n\t\tthis.iterateListeners(listener => {\r\n\t\t\tif (listener.labelFactoriesUpdated) {\r\n\t\t\t\tlistener.labelFactoriesUpdated();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tregisterPortFactory(factory: AbstractPortFactory) {\r\n\t\tthis.portFactories[factory.getType()] = factory;\r\n\t\tthis.iterateListeners(listener => {\r\n\t\t\tif (listener.portFactoriesUpdated) {\r\n\t\t\t\tlistener.portFactoriesUpdated();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tregisterNodeFactory(factory: AbstractNodeFactory) {\r\n\t\tthis.nodeFactories[factory.getType()] = factory;\r\n\t\tthis.iterateListeners(listener => {\r\n\t\t\tif (listener.nodeFactoriesUpdated) {\r\n\t\t\t\tlistener.nodeFactoriesUpdated();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tregisterLinkFactory(factory: AbstractLinkFactory) {\r\n\t\tthis.linkFactories[factory.getType()] = factory;\r\n\t\tthis.iterateListeners(listener => {\r\n\t\t\tif (listener.linkFactoriesUpdated) {\r\n\t\t\t\tlistener.linkFactoriesUpdated();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetPortFactory(type: string): AbstractPortFactory {\r\n\t\tif (this.portFactories[type]) {\r\n\t\t\treturn this.portFactories[type];\r\n\t\t}\r\n\t\tthrow new Error(`cannot find factory for port of type: [${type}]`);\r\n\t}\r\n\r\n\tgetNodeFactory(type: string): AbstractNodeFactory {\r\n\t\tif (this.nodeFactories[type]) {\r\n\t\t\treturn this.nodeFactories[type];\r\n\t\t}\r\n\t\tthrow new Error(`cannot find factory for node of type: [${type}]`);\r\n\t}\r\n\r\n\tgetLinkFactory(type: string): AbstractLinkFactory {\r\n\t\tif (this.linkFactories[type]) {\r\n\t\t\treturn this.linkFactories[type];\r\n\t\t}\r\n\t\tthrow new Error(`cannot find factory for link of type: [${type}]`);\r\n\t}\r\n\r\n\tgetLabelFactory(type: string): AbstractLabelFactory {\r\n\t\tif (this.labelFactories[type]) {\r\n\t\t\treturn this.labelFactories[type];\r\n\t\t}\r\n\t\tthrow new Error(`cannot find factory for label of type: [${type}]`);\r\n\t}\r\n\r\n\tgetFactoryForNode(node: NodeModel): AbstractNodeFactory | null {\r\n\t\treturn this.getNodeFactory(node.getType());\r\n\t}\r\n\r\n\tgetFactoryForLink(link: LinkModel): AbstractLinkFactory | null {\r\n\t\treturn this.getLinkFactory(link.getType());\r\n\t}\r\n\r\n\tgetFactoryForLabel(label: LabelModel): AbstractLabelFactory | null {\r\n\t\treturn this.getLabelFactory(label.getType());\r\n\t}\r\n\r\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element | null {\r\n\t\tvar linkFactory = this.getFactoryForLink(link);\r\n\t\tif (!linkFactory) {\r\n\t\t\tthrow new Error(\"Cannot find link factory for link: \" + link.getType());\r\n\t\t}\r\n\t\treturn linkFactory.generateReactWidget(this, link);\r\n\t}\r\n\r\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element | null {\r\n\t\tvar nodeFactory = this.getFactoryForNode(node);\r\n\t\tif (!nodeFactory) {\r\n\t\t\tthrow new Error(\"Cannot find widget factory for node: \" + node.getType());\r\n\t\t}\r\n\t\treturn nodeFactory.generateReactWidget(this, node);\r\n\t}\r\n\r\n\tgetRelativeMousePoint(event): { x: number; y: number } {\r\n\t\tvar point = this.getRelativePoint(event.clientX, event.clientY);\r\n\t\treturn {\r\n\t\t\tx: (point.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\r\n\t\t\ty: (point.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\r\n\t\t};\r\n\t}\r\n\r\n\tgetRelativePoint(x, y) {\r\n\t\tvar canvasRect = this.canvas.getBoundingClientRect();\r\n\t\treturn { x: x - canvasRect.left, y: y - canvasRect.top };\r\n\t}\r\n\r\n\tgetNodeElement(node: NodeModel): Element {\r\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\r\n\t\tif (selector === null) {\r\n\t\t\tthrow new Error(\"Cannot find Node element with nodeID: [\" + node.getID() + \"]\");\r\n\t\t}\r\n\t\treturn selector;\r\n\t}\r\n\r\n\tgetNodePortElement(port: PortModel): any {\r\n\t\tvar selector = this.canvas.querySelector(\r\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\r\n\t\t);\r\n\t\tif (selector === null) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Cannot find Node Port element with nodeID: [\" +\r\n\t\t\t\t\tport.getParent().getID() +\r\n\t\t\t\t\t\"] and name: [\" +\r\n\t\t\t\t\tport.getName() +\r\n\t\t\t\t\t\"]\"\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn selector;\r\n\t}\r\n\r\n\tgetPortCenter(port: PortModel) {\r\n\t\tvar sourceElement = this.getNodePortElement(port);\r\n\t\tvar sourceRect = sourceElement.getBoundingClientRect();\r\n\r\n\t\tvar rel = this.getRelativePoint(sourceRect.left, sourceRect.top);\r\n\r\n\t\treturn {\r\n\t\t\tx:\r\n\t\t\t\tsourceElement.offsetWidth / 2 +\r\n\t\t\t\t(rel.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\r\n\t\t\ty:\r\n\t\t\t\tsourceElement.offsetHeight / 2 +\r\n\t\t\t\t(rel.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate rectangular coordinates of the port passed in.\r\n\t */\r\n\tgetPortCoords(\r\n\t\tport: PortModel\r\n\t): {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\twidth: number;\r\n\t\theight: number;\r\n\t} {\r\n\t\tconst sourceElement = this.getNodePortElement(port);\r\n\t\tconst sourceRect = sourceElement.getBoundingClientRect();\r\n\t\tconst canvasRect = this.canvas.getBoundingClientRect() as ClientRect;\r\n\r\n\t\treturn {\r\n\t\t\tx:\r\n\t\t\t\t(sourceRect.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0) -\r\n\t\t\t\tcanvasRect.left,\r\n\t\t\ty:\r\n\t\t\t\t(sourceRect.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0) -\r\n\t\t\t\tcanvasRect.top,\r\n\t\t\twidth: sourceRect.width,\r\n\t\t\theight: sourceRect.height\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Determine the width and height of the node passed in.\r\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\r\n\t */\r\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\r\n\t\tif (!this.canvas) {\r\n\t\t\treturn {\r\n\t\t\t\twidth: 0,\r\n\t\t\t\theight: 0\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst nodeElement = this.getNodeElement(node);\r\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\r\n\r\n\t\treturn {\r\n\t\t\twidth: nodeRect.width,\r\n\t\t\theight: nodeRect.height\r\n\t\t};\r\n\t}\r\n\r\n\tgetMaxNumberPointsPerLink(): number {\r\n\t\treturn this.maxNumberPointsPerLink;\r\n\t}\r\n\r\n\tsetMaxNumberPointsPerLink(max: number) {\r\n\t\tthis.maxNumberPointsPerLink = max;\r\n\t}\r\n\r\n\tisSmartRoutingEnabled() {\r\n\t\treturn !!this.smartRouting;\r\n\t}\r\n\tsetSmartRoutingStatus(status: boolean) {\r\n\t\tthis.smartRouting = status;\r\n\t}\r\n\r\n\t/**\r\n\t * A representation of the canvas in the following format:\r\n\t *\r\n\t * +-----------------+\r\n\t * | 0 0 0 0 0 0 0 0 |\r\n\t * | 0 0 0 0 0 0 0 0 |\r\n\t * | 0 0 0 0 0 0 0 0 |\r\n\t * | 0 0 0 0 0 0 0 0 |\r\n\t * | 0 0 0 0 0 0 0 0 |\r\n\t * +-----------------+\r\n\t *\r\n\t * In which all walkable points are marked by zeros.\r\n\t * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\r\n\t */\r\n\tgetCanvasMatrix(): number[][] {\r\n\t\tif (this.canvasMatrix.length === 0) {\r\n\t\t\tthis.calculateCanvasMatrix();\r\n\t\t}\r\n\r\n\t\treturn this.canvasMatrix;\r\n\t}\r\n\tcalculateCanvasMatrix() {\r\n\t\tconst {\r\n\t\t\twidth: canvasWidth,\r\n\t\t\thAdjustmentFactor,\r\n\t\t\theight: canvasHeight,\r\n\t\t\tvAdjustmentFactor\r\n\t\t} = this.calculateMatrixDimensions();\r\n\r\n\t\tthis.hAdjustmentFactor = hAdjustmentFactor;\r\n\t\tthis.vAdjustmentFactor = vAdjustmentFactor;\r\n\r\n\t\tconst matrixWidth = Math.ceil(canvasWidth / ROUTING_SCALING_FACTOR);\r\n\t\tconst matrixHeight = Math.ceil(canvasHeight / ROUTING_SCALING_FACTOR);\r\n\r\n\t\tthis.canvasMatrix = _.range(0, matrixHeight).map(() => {\r\n\t\t\treturn new Array(matrixWidth).fill(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A representation of the canvas in the following format:\r\n\t *\r\n\t * +-----------------+\r\n\t * | 0 0 1 1 0 0 0 0 |\r\n\t * | 0 0 1 1 0 0 1 1 |\r\n\t * | 0 0 0 0 0 0 1 1 |\r\n\t * | 1 1 0 0 0 0 0 0 |\r\n\t * | 1 1 0 0 0 0 0 0 |\r\n\t * +-----------------+\r\n\t *\r\n\t * In which all points blocked by a node (and its ports) are\r\n\t * marked as 1; points were there is nothing (ie, free) receive 0.\r\n\t */\r\n\tgetRoutingMatrix(): number[][] {\r\n\t\tif (this.routingMatrix.length === 0) {\r\n\t\t\tthis.calculateRoutingMatrix();\r\n\t\t}\r\n\r\n\t\treturn this.routingMatrix;\r\n\t}\r\n\tcalculateRoutingMatrix(): void {\r\n\t\tconst matrix = _.cloneDeep(this.getCanvasMatrix());\r\n\r\n\t\t// nodes need to be marked as blocked points\r\n\t\tthis.markNodes(matrix);\r\n\t\t// same thing for ports\r\n\t\tthis.markPorts(matrix);\r\n\r\n\t\tthis.routingMatrix = matrix;\r\n\t}\r\n\r\n\t/**\r\n\t * The routing matrix does not have negative indexes, but elements could be negatively positioned.\r\n\t * We use the functions below to translate back and forth between these coordinates, relying on the\r\n\t * calculated values of hAdjustmentFactor and vAdjustmentFactor.\r\n\t */\r\n\ttranslateRoutingX(x: number, reverse: boolean = false) {\r\n\t\treturn x + this.hAdjustmentFactor * (reverse ? -1 : 1);\r\n\t}\r\n\ttranslateRoutingY(y: number, reverse: boolean = false) {\r\n\t\treturn y + this.vAdjustmentFactor * (reverse ? -1 : 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\r\n\t * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\r\n\t */\r\n\tcalculateMatrixDimensions = (): {\r\n\t\twidth: number;\r\n\t\thAdjustmentFactor: number;\r\n\t\theight: number;\r\n\t\tvAdjustmentFactor: number;\r\n\t} => {\r\n\t\tconst allNodesCoords = _.values(this.diagramModel.nodes).map(item => ({\r\n\t\t\tx: item.x,\r\n\t\t\twidth: item.width,\r\n\t\t\ty: item.y,\r\n\t\t\theight: item.height\r\n\t\t}));\r\n\r\n\t\tconst allLinks = _.values(this.diagramModel.links);\r\n\t\tconst allPortsCoords = _.flatMap(allLinks.map(link => [link.sourcePort, link.targetPort]))\r\n\t\t\t.filter(port => port !== null)\r\n\t\t\t.map(item => ({\r\n\t\t\t\tx: item.x,\r\n\t\t\t\twidth: item.width,\r\n\t\t\t\ty: item.y,\r\n\t\t\t\theight: item.height\r\n\t\t\t}));\r\n\t\tconst allPointsCoords = _.flatMap(allLinks.map(link => link.points)).map(item => ({\r\n\t\t\t// points don't have width/height, so let's just use 0\r\n\t\t\tx: item.x,\r\n\t\t\twidth: 0,\r\n\t\t\ty: item.y,\r\n\t\t\theight: 0\r\n\t\t}));\r\n\r\n\t\tconst canvas = this.canvas as HTMLDivElement;\r\n\t\tconst minX =\r\n\t\t\tMath.floor(\r\n\t\t\t\tMath.min(_.minBy(_.concat(allNodesCoords, allPortsCoords, allPointsCoords), item => item.x).x, 0) /\r\n\t\t\t\t\tROUTING_SCALING_FACTOR\r\n\t\t\t) * ROUTING_SCALING_FACTOR;\r\n\t\tconst maxXElement = _.maxBy(\r\n\t\t\t_.concat(allNodesCoords, allPortsCoords, allPointsCoords),\r\n\t\t\titem => item.x + item.width\r\n\t\t);\r\n\t\tconst maxX = Math.max(maxXElement.x + maxXElement.width, canvas.offsetWidth);\r\n\r\n\t\tconst minY =\r\n\t\t\tMath.floor(\r\n\t\t\t\tMath.min(_.minBy(_.concat(allNodesCoords, allPortsCoords, allPointsCoords), item => item.y).y, 0) /\r\n\t\t\t\t\tROUTING_SCALING_FACTOR\r\n\t\t\t) * ROUTING_SCALING_FACTOR;\r\n\t\tconst maxYElement = _.maxBy(\r\n\t\t\t_.concat(allNodesCoords, allPortsCoords, allPointsCoords),\r\n\t\t\titem => item.y + item.height\r\n\t\t);\r\n\t\tconst maxY = Math.max(maxYElement.y + maxYElement.height, canvas.offsetHeight);\r\n\r\n\t\treturn {\r\n\t\t\twidth: Math.ceil(Math.abs(minX) + maxX),\r\n\t\t\thAdjustmentFactor: Math.abs(minX) / ROUTING_SCALING_FACTOR + 1,\r\n\t\t\theight: Math.ceil(Math.abs(minY) + maxY),\r\n\t\t\tvAdjustmentFactor: Math.abs(minY) / ROUTING_SCALING_FACTOR + 1\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Updates (by reference) where nodes will be drawn on the matrix passed in.\r\n\t */\r\n\tmarkNodes = (matrix: number[][]): void => {\r\n\t\t_.values(this.diagramModel.nodes).forEach(node => {\r\n\t\t\tconst startX = Math.floor(node.x / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst endX = Math.ceil((node.x + node.width) / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst startY = Math.floor(node.y / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst endY = Math.ceil((node.y + node.height) / ROUTING_SCALING_FACTOR);\r\n\r\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\r\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\r\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Updates (by reference) where ports will be drawn on the matrix passed in.\r\n\t */\r\n\tmarkPorts = (matrix: number[][]): void => {\r\n\t\tconst allElements = _.flatMap(\r\n\t\t\t_.values(this.diagramModel.links).map(link => [].concat(link.sourcePort, link.targetPort))\r\n\t\t);\r\n\t\tallElements.filter(port => port !== null).forEach(port => {\r\n\t\t\tconst startX = Math.floor(port.x / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst endX = Math.ceil((port.x + port.width) / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst startY = Math.floor(port.y / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst endY = Math.ceil((port.y + port.height) / ROUTING_SCALING_FACTOR);\r\n\r\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\r\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\r\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tmarkMatrixPoint = (matrix: number[][], x: number, y: number) => {\r\n\t\tif (matrix[y] !== undefined && matrix[y][x] !== undefined) {\r\n\t\t\tmatrix[y][x] = 1;\r\n\t\t}\r\n\t};\r\n\r\n\tzoomToFit() {\r\n\t\tconst xFactor = this.canvas.clientWidth / this.canvas.scrollWidth;\r\n\t\tconst yFactor = this.canvas.clientHeight / this.canvas.scrollHeight;\r\n\t\tconst zoomFactor = xFactor < yFactor ? xFactor : yFactor;\r\n\r\n\t\tthis.diagramModel.setZoomLevel(this.diagramModel.getZoomLevel() * zoomFactor);\r\n\t\tthis.diagramModel.setOffset(0, 0);\r\n\t\tthis.repaintCanvas();\r\n\t}\r\n}\r\n","// tslint:disable no-bitwise\r\nimport closest from \"closest\"\r\nimport { PointModel } from \"./models/PointModel\";\r\nimport { ROUTING_SCALING_FACTOR } from \"./routing/PathFinding\";\r\nimport * as Path from \"paths-js/path\";\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class Toolkit {\r\n\tstatic TESTING: boolean = false;\r\n\tstatic TESTING_UID = 0;\r\n\r\n\t/**\r\n\t * Generats a unique ID (thanks Stack overflow :3)\r\n\t * @returns {String}\r\n\t */\r\n\tpublic static UID(): string {\r\n\t\tif (Toolkit.TESTING) {\r\n\t\t\tToolkit.TESTING_UID++;\r\n\t\t\treturn \"\" + Toolkit.TESTING_UID;\r\n\t\t}\r\n\t\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\r\n\t\t\tconst r = (Math.random() * 16) | 0;\r\n\t\t\tconst v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n\t\t\treturn v.toString(16);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the closest element as a polyfill\r\n\t *\r\n\t * @param  {Element} element  [description]\r\n\t * @param  {string}  selector [description]\r\n\t */\r\n\tpublic static closest(element: Element, selector: string) {\r\n\t\tif (document.body.closest) {\r\n\t\t\treturn element.closest(selector);\r\n\t\t}\r\n\t\treturn closest(element, selector);\r\n\t}\r\n\r\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\r\n\t\treturn `M${firstPoint.x},${firstPoint.y} L ${lastPoint.x},${lastPoint.y}`;\r\n\t}\r\n\r\n\tpublic static generateCurvePath(firstPoint: PointModel, lastPoint: PointModel, curvy: number = 0): string {\r\n\t\tvar isHorizontal = Math.abs(firstPoint.x - lastPoint.x) > Math.abs(firstPoint.y - lastPoint.y);\r\n\r\n\t\tvar xOrY = isHorizontal ? \"x\" : \"y\";\r\n\r\n\t\t// make sure that smoothening works\r\n\t\t// without disrupting the line direction\r\n\t\tlet curvyness = curvy;\r\n\t\tif (firstPoint[xOrY] > firstPoint[xOrY]) {\r\n\t\t\tcurvyness = -curvy;\r\n\t\t}\r\n\r\n\t\tvar curvyX = isHorizontal ? curvyness : 0;\r\n\t\tvar curvyY = isHorizontal ? 0 : curvyness;\r\n\r\n\t\treturn `M${firstPoint.x},${firstPoint.y} C ${firstPoint.x + curvyX},${firstPoint.y + curvyY}\r\n    ${lastPoint.x - curvyX},${lastPoint.y - curvyY} ${lastPoint.x},${lastPoint.y}`;\r\n\t}\r\n\r\n\tpublic static generateDynamicPath(pathCoords: number[][]) {\r\n\t\tlet path = Path();\r\n\t\tpath = path.moveto(pathCoords[0][0] * ROUTING_SCALING_FACTOR, pathCoords[0][1] * ROUTING_SCALING_FACTOR);\r\n\t\tpathCoords.slice(1).forEach(coords => {\r\n\t\t\tpath = path.lineto(coords[0] * ROUTING_SCALING_FACTOR, coords[1] * ROUTING_SCALING_FACTOR);\r\n\t\t});\r\n\t\treturn path.print();\r\n\t}\r\n}\r\n","export class BaseAction {\r\n\tmouseX: number;\r\n\tmouseY: number;\r\n\tms: number;\r\n\r\n\tconstructor(mouseX: number, mouseY: number) {\r\n\t\tthis.mouseX = mouseX;\r\n\t\tthis.mouseY = mouseY;\r\n\t\tthis.ms = new Date().getTime();\r\n\t}\r\n}\r\n","import { BaseAction } from \"./BaseAction\";\r\nimport { DiagramModel } from \"../models/DiagramModel\";\r\n\r\nexport class MoveCanvasAction extends BaseAction {\r\n\tinitialOffsetX: number;\r\n\tinitialOffsetY: number;\r\n\r\n\tconstructor(mouseX: number, mouseY: number, diagramModel: DiagramModel) {\r\n\t\tsuper(mouseX, mouseY);\r\n\t\tthis.initialOffsetX = diagramModel.getOffsetX();\r\n\t\tthis.initialOffsetY = diagramModel.getOffsetY();\r\n\t}\r\n}\r\n","import { BaseAction } from \"./BaseAction\";\r\nimport { SelectionModel } from \"../models/SelectionModel\";\r\nimport { PointModel } from \"../models/PointModel\";\r\nimport { NodeModel } from \"../models/NodeModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\n\r\nexport class MoveItemsAction extends BaseAction {\r\n\tselectionModels: SelectionModel[];\r\n\tmoved: boolean;\r\n\r\n\tconstructor(mouseX: number, mouseY: number, diagramEngine: DiagramEngine) {\r\n\t\tsuper(mouseX, mouseY);\r\n\t\tthis.moved = false;\r\n\t\tdiagramEngine.enableRepaintEntities(diagramEngine.getDiagramModel().getSelectedItems());\r\n\t\tvar selectedItems = diagramEngine.getDiagramModel().getSelectedItems();\r\n\r\n\t\t//dont allow items which are locked to move\r\n\t\tselectedItems = selectedItems.filter(item => {\r\n\t\t\treturn !diagramEngine.isModelLocked(item);\r\n\t\t});\r\n\r\n\t\tthis.selectionModels = selectedItems.map((item: PointModel | NodeModel) => {\r\n\t\t\treturn {\r\n\t\t\t\tmodel: item,\r\n\t\t\t\tinitialX: item.x,\r\n\t\t\t\tinitialY: item.y\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n}\r\n","import { BaseAction } from \"./BaseAction\";\r\nimport { DiagramModel } from \"../models/DiagramModel\";\r\n\r\nexport class SelectingAction extends BaseAction {\r\n\tmouseX2: number;\r\n\tmouseY2: number;\r\n\r\n\tconstructor(mouseX: number, mouseY: number) {\r\n\t\tsuper(mouseX, mouseY);\r\n\t\tthis.mouseX2 = mouseX;\r\n\t\tthis.mouseY2 = mouseY;\r\n\t}\r\n\r\n\tgetBoxDimensions() {\r\n\t\treturn {\r\n\t\t\tleft: this.mouseX2 > this.mouseX ? this.mouseX : this.mouseX2,\r\n\t\t\ttop: this.mouseY2 > this.mouseY ? this.mouseY : this.mouseY2,\r\n\t\t\twidth: Math.abs(this.mouseX2 - this.mouseX),\r\n\t\t\theight: Math.abs(this.mouseY2 - this.mouseY),\r\n\t\t\tright: this.mouseX2 < this.mouseX ? this.mouseX : this.mouseX2,\r\n\t\t\tbottom: this.mouseY2 < this.mouseY ? this.mouseY : this.mouseY2\r\n\t\t};\r\n\t}\r\n\r\n\tcontainsElement(x: number, y: number, diagramModel: DiagramModel): boolean {\r\n\t\tvar z = diagramModel.getZoomLevel() / 100.0;\r\n\t\tlet dimensions = this.getBoxDimensions();\r\n\r\n\t\treturn (\r\n\t\t\tx * z + diagramModel.getOffsetX() > dimensions.left &&\r\n\t\t\tx * z + diagramModel.getOffsetX() < dimensions.right &&\r\n\t\t\ty * z + diagramModel.getOffsetY() > dimensions.top &&\r\n\t\t\ty * z + diagramModel.getOffsetY() < dimensions.bottom\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { AbstractLabelFactory } from \"../../factories/AbstractLabelFactory\";\r\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\r\nimport { DefaultLabelWidget } from \"../widgets/DefaultLabelWidget\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultLabelFactory extends AbstractLabelFactory<DefaultLabelModel> {\r\n\tconstructor() {\r\n\t\tsuper(\"default\");\r\n\t}\r\n\r\n\tgenerateReactWidget(diagramEngine: DiagramEngine, label: DefaultLabelModel): JSX.Element {\r\n\t\treturn <DefaultLabelWidget model={label} />;\r\n\t}\r\n\r\n\tgetNewInstance(initialConfig?: any): DefaultLabelModel {\r\n\t\treturn new DefaultLabelModel();\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DefaultLinkWidget } from \"../widgets/DefaultLinkWidget\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { AbstractLinkFactory } from \"../../factories/AbstractLinkFactory\";\r\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\r\n\tconstructor() {\r\n\t\tsuper(\"default\");\r\n\t}\r\n\r\n\tgenerateReactWidget(diagramEngine: DiagramEngine, link: DefaultLinkModel): JSX.Element {\r\n\t\treturn React.createElement(DefaultLinkWidget, {\r\n\t\t\tlink: link,\r\n\t\t\tdiagramEngine: diagramEngine\r\n\t\t});\r\n\t}\r\n\r\n\tgetNewInstance(initialConfig?: any): DefaultLinkModel {\r\n\t\treturn new DefaultLinkModel();\r\n\t}\r\n\r\n\tgenerateLinkSegment(model: DefaultLinkModel, widget: DefaultLinkWidget, selected: boolean, path: string) {\r\n\t\treturn (\r\n\t\t\t<path\r\n\t\t\t\tclassName={selected ? widget.bem(\"--path-selected\") : \"\"}\r\n\t\t\t\tstrokeWidth={model.width}\r\n\t\t\t\tstroke={model.color}\r\n\t\t\t\td={path}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import { DefaultNodeModel } from \"../models/DefaultNodeModel\";\r\nimport * as React from \"react\";\r\nimport { DefaultNodeWidget } from \"../widgets/DefaultNodeWidget\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { AbstractNodeFactory } from \"../../factories/AbstractNodeFactory\";\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\r\n\tconstructor() {\r\n\t\tsuper(\"default\");\r\n\t}\r\n\r\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: DefaultNodeModel): JSX.Element {\r\n\t\treturn React.createElement(DefaultNodeWidget, {\r\n\t\t\tnode: node,\r\n\t\t\tdiagramEngine: diagramEngine\r\n\t\t});\r\n\t}\r\n\r\n\tgetNewInstance(initialConfig?: any): DefaultNodeModel {\r\n\t\treturn new DefaultNodeModel();\r\n\t}\r\n}\r\n","import { DefaultPortModel } from \"../models/DefaultPortModel\";\r\nimport { AbstractPortFactory } from \"../../factories/AbstractPortFactory\";\r\n\r\nexport class DefaultPortFactory extends AbstractPortFactory<DefaultPortModel> {\r\n\tconstructor() {\r\n\t\tsuper(\"default\");\r\n\t}\r\n\r\n\tgetNewInstance(initialConfig?: any): DefaultPortModel {\r\n\t\treturn new DefaultPortModel(true, \"unknown\");\r\n\t}\r\n}\r\n","import { LabelModel } from \"../../models/LabelModel\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\n\r\nexport class DefaultLabelModel extends LabelModel {\r\n\tlabel: string;\r\n\r\n\tconstructor() {\r\n\t\tsuper(\"default\");\r\n\t\tthis.offsetY = -23;\r\n\t}\r\n\r\n\tsetLabel(label: string) {\r\n\t\tthis.label = label;\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.label = ob.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tlabel: this.label\r\n\t\t});\r\n\t}\r\n}\r\n","/**\r\n * @author Dylan Vorster\r\n */\r\nimport { LinkModel, LinkModelListener } from \"../../models/LinkModel\";\r\nimport { BaseEvent } from \"../../BaseEntity\";\r\nimport * as _ from \"lodash\";\r\nimport { PointModel } from \"../../models/PointModel\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { DefaultLabelModel } from \"./DefaultLabelModel\";\r\nimport { LabelModel } from \"../../models/LabelModel\";\r\n\r\nexport interface DefaultLinkModelListener extends LinkModelListener {\r\n\tcolorChanged?(event: BaseEvent<DefaultLinkModel> & { color: null | string }): void;\r\n\r\n\twidthChanged?(event: BaseEvent<DefaultLinkModel> & { width: 0 | number }): void;\r\n}\r\n\r\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelListener> {\r\n\twidth: number;\r\n\tcolor: string;\r\n\tcurvyness: number;\r\n\r\n\tconstructor(type: string = \"default\") {\r\n\t\tsuper(type);\r\n\t\tthis.color = \"rgba(255,255,255,0.5)\";\r\n\t\tthis.width = 3;\r\n\t\tthis.curvyness = 50;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\twidth: this.width,\r\n\t\t\tcolor: this.color,\r\n\t\t\tcurvyness: this.curvyness\r\n\t\t});\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.color = ob.color;\r\n\t\tthis.width = ob.width;\r\n\t\tthis.curvyness = ob.curvyness;\r\n\t}\r\n\r\n\taddLabel(label: LabelModel | string) {\r\n\t\tif (label instanceof LabelModel) {\r\n\t\t\treturn super.addLabel(label);\r\n\t\t}\r\n\t\tlet labelOb = new DefaultLabelModel();\r\n\t\tlabelOb.setLabel(label);\r\n\t\treturn super.addLabel(labelOb);\r\n\t}\r\n\r\n\tsetWidth(width: number) {\r\n\t\tthis.width = width;\r\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\r\n\t\t\tif (listener.widthChanged) {\r\n\t\t\t\tlistener.widthChanged({ ...event, width: width });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetColor(color: string) {\r\n\t\tthis.color = color;\r\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\r\n\t\t\tif (listener.colorChanged) {\r\n\t\t\t\tlistener.colorChanged({ ...event, color: color });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","import { DefaultPortModel } from \"./DefaultPortModel\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport { NodeModel, NodeModelListener } from \"../../models/NodeModel\";\r\nimport { Toolkit } from \"../../Toolkit\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultNodeModel extends NodeModel<NodeModelListener> {\r\n\tname: string;\r\n\tcolor: string;\r\n\tports: { [s: string]: DefaultPortModel };\r\n\r\n\tconstructor(name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\r\n\t\tsuper(\"default\");\r\n\t\tthis.name = name;\r\n\t\tthis.color = color;\r\n\t}\r\n\r\n\taddInPort(label: string): DefaultPortModel {\r\n\t\treturn this.addPort(new DefaultPortModel(true, Toolkit.UID(), label));\r\n\t}\r\n\r\n\taddOutPort(label: string): DefaultPortModel {\r\n\t\treturn this.addPort(new DefaultPortModel(false, Toolkit.UID(), label));\r\n\t}\r\n\r\n\tdeSerialize(object, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(object, engine);\r\n\t\tthis.name = object.name;\r\n\t\tthis.color = object.color;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tname: this.name,\r\n\t\t\tcolor: this.color\r\n\t\t});\r\n\t}\r\n\r\n\tgetInPorts(): DefaultPortModel[] {\r\n\t\treturn _.filter(this.ports, portModel => {\r\n\t\t\treturn portModel.in;\r\n\t\t});\r\n\t}\r\n\r\n\tgetOutPorts(): DefaultPortModel[] {\r\n\t\treturn _.filter(this.ports, portModel => {\r\n\t\t\treturn !portModel.in;\r\n\t\t});\r\n\t}\r\n}\r\n","import * as _ from \"lodash\";\r\nimport { PortModel } from \"../../models/PortModel\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { DefaultLinkModel } from \"./DefaultLinkModel\";\r\nimport { LinkModel } from \"../../models/LinkModel\";\r\n\r\nexport class DefaultPortModel extends PortModel {\r\n\tin: boolean;\r\n\tlabel: string;\r\n\tlinks: { [id: string]: DefaultLinkModel };\r\n\r\n\tconstructor(isInput: boolean, name: string, label: string = null, id?: string) {\r\n\t\tsuper(name, \"default\", id);\r\n\t\tthis.in = isInput;\r\n\t\tthis.label = label || name;\r\n\t}\r\n\r\n\tdeSerialize(object, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(object, engine);\r\n\t\tthis.in = object.in;\r\n\t\tthis.label = object.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tin: this.in,\r\n\t\t\tlabel: this.label\r\n\t\t});\r\n\t}\r\n\r\n\tlink(port: PortModel): LinkModel {\r\n\t\tlet link = this.createLinkModel();\r\n\t\tlink.setSourcePort(this);\r\n\t\tlink.setTargetPort(port);\r\n\t\treturn link;\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\tif (port instanceof DefaultPortModel) {\r\n\t\t\treturn this.in !== port.in;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tcreateLinkModel(): LinkModel {\r\n\t\tlet link = super.createLinkModel();\r\n\t\treturn link || new DefaultLinkModel();\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\r\n\r\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\r\n\tmodel: DefaultLabelModel;\r\n}\r\n\r\nexport class DefaultLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\r\n\tconstructor(props) {\r\n\t\tsuper(\"srd-default-label\", props);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <div {...this.getProps()}>{this.props.model.label}</div>;\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { PointModel } from \"../../models/PointModel\";\r\nimport { Toolkit } from \"../../Toolkit\";\r\nimport { DefaultLinkFactory } from \"../factories/DefaultLinkFactory\";\r\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\r\nimport PathFinding from \"../../routing/PathFinding\";\r\nimport * as _ from \"lodash\";\r\nimport { LabelModel } from \"../../models/LabelModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\r\n\r\nexport interface DefaultLinkProps extends BaseWidgetProps {\r\n\tcolor?: string;\r\n\twidth?: number;\r\n\tsmooth?: boolean;\r\n\tlink: DefaultLinkModel;\r\n\tdiagramEngine: DiagramEngine;\r\n\tpointAdded?: (point: PointModel, event: MouseEvent) => any;\r\n}\r\n\r\nexport interface DefaultLinkState {\r\n\tselected: boolean;\r\n}\r\n\r\nexport class DefaultLinkWidget extends BaseWidget<DefaultLinkProps, DefaultLinkState> {\r\n\tpublic static defaultProps: DefaultLinkProps = {\r\n\t\tcolor: \"black\",\r\n\t\twidth: 3,\r\n\t\tlink: null,\r\n\t\tengine: null,\r\n\t\tsmooth: false,\r\n\t\tdiagramEngine: null\r\n\t};\r\n\r\n\t// DOM references to the label and paths (if label is given), used to calculate dynamic positioning\r\n\trefLabels: { [id: string]: HTMLElement };\r\n\trefPaths: SVGPathElement[];\r\n\r\n\tpathFinding: PathFinding; // only set when smart routing is active\r\n\r\n\tconstructor(props: DefaultLinkProps) {\r\n\t\tsuper(\"srd-default-link\", props);\r\n\r\n\t\tthis.refLabels = {};\r\n\t\tthis.refPaths = [];\r\n\t\tthis.state = {\r\n\t\t\tselected: false\r\n\t\t};\r\n\r\n\t\tif (props.diagramEngine.isSmartRoutingEnabled()) {\r\n\t\t\tthis.pathFinding = new PathFinding(this.props.diagramEngine);\r\n\t\t}\r\n\t}\r\n\r\n\tcalculateAllLabelPosition() {\r\n\t\t_.forEach(this.props.link.labels, (label, index) => {\r\n\t\t\tthis.calculateLabelPosition(label, index + 1);\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tif (this.props.link.labels.length > 0) {\r\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (this.props.link.labels.length > 0) {\r\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\r\n\t\t}\r\n\t}\r\n\r\n\taddPointToLink = (event: MouseEvent, index: number): void => {\r\n\t\tif (\r\n\t\t\t!event.shiftKey &&\r\n\t\t\t!this.props.diagramEngine.isModelLocked(this.props.link) &&\r\n\t\t\tthis.props.link.points.length - 1 <= this.props.diagramEngine.getMaxNumberPointsPerLink()\r\n\t\t) {\r\n\t\t\tconst point = new PointModel(this.props.link, this.props.diagramEngine.getRelativeMousePoint(event));\r\n\t\t\tpoint.setSelected(true);\r\n\t\t\tthis.forceUpdate();\r\n\t\t\tthis.props.link.addPoint(point, index);\r\n\t\t\tthis.props.pointAdded(point, event);\r\n\t\t}\r\n\t};\r\n\r\n\tgeneratePoint(pointIndex: number): JSX.Element {\r\n\t\tlet x = this.props.link.points[pointIndex].x;\r\n\t\tlet y = this.props.link.points[pointIndex].y;\r\n\r\n\t\treturn (\r\n\t\t\t<g key={\"point-\" + this.props.link.points[pointIndex].id}>\r\n\t\t\t\t<circle\r\n\t\t\t\t\tcx={x}\r\n\t\t\t\t\tcy={y}\r\n\t\t\t\t\tr={5}\r\n\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\"point \" +\r\n\t\t\t\t\t\tthis.bem(\"__point\") +\r\n\t\t\t\t\t\t(this.props.link.points[pointIndex].isSelected() ? this.bem(\"--point-selected\") : \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<circle\r\n\t\t\t\t\tonMouseLeave={() => {\r\n\t\t\t\t\t\tthis.setState({ selected: false });\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonMouseEnter={() => {\r\n\t\t\t\t\t\tthis.setState({ selected: true });\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tdata-id={this.props.link.points[pointIndex].id}\r\n\t\t\t\t\tdata-linkid={this.props.link.id}\r\n\t\t\t\t\tcx={x}\r\n\t\t\t\t\tcy={y}\r\n\t\t\t\t\tr={15}\r\n\t\t\t\t\topacity={0}\r\n\t\t\t\t\tclassName={\"point \" + this.bem(\"__point\")}\r\n\t\t\t\t/>\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n\r\n\tgenerateLabel(label: LabelModel) {\r\n\t\tconst canvas = this.props.diagramEngine.canvas as HTMLElement;\r\n\t\treturn (\r\n\t\t\t<foreignObject\r\n\t\t\t\tkey={label.id}\r\n\t\t\t\tclassName={this.bem(\"__label\")}\r\n\t\t\t\twidth={canvas.offsetWidth}\r\n\t\t\t\theight={canvas.offsetHeight}\r\n\t\t\t>\r\n\t\t\t\t<div ref={ref => (this.refLabels[label.id] = ref)}>\r\n\t\t\t\t\t{this.props.diagramEngine\r\n\t\t\t\t\t\t.getFactoryForLabel(label)\r\n\t\t\t\t\t\t.generateReactWidget(this.props.diagramEngine, label)}\r\n\t\t\t\t</div>\r\n\t\t\t</foreignObject>\r\n\t\t);\r\n\t}\r\n\r\n\tgenerateLink(path: string, extraProps: any, id: string | number): JSX.Element {\r\n\t\tvar props = this.props;\r\n\r\n\t\tvar Bottom = React.cloneElement(\r\n\t\t\t(props.diagramEngine.getFactoryForLink(this.props.link) as DefaultLinkFactory).generateLinkSegment(\r\n\t\t\t\tthis.props.link,\r\n\t\t\t\tthis,\r\n\t\t\t\tthis.state.selected || this.props.link.isSelected(),\r\n\t\t\t\tpath\r\n\t\t\t),\r\n\t\t\t{\r\n\t\t\t\tref: ref => ref && this.refPaths.push(ref)\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tvar Top = React.cloneElement(Bottom, {\r\n\t\t\t...extraProps,\r\n\t\t\tstrokeLinecap: \"round\",\r\n\t\t\tonMouseLeave: () => {\r\n\t\t\t\tthis.setState({ selected: false });\r\n\t\t\t},\r\n\t\t\tonMouseEnter: () => {\r\n\t\t\t\tthis.setState({ selected: true });\r\n\t\t\t},\r\n\t\t\tref: null,\r\n\t\t\t\"data-linkid\": this.props.link.getID(),\r\n\t\t\tstrokeOpacity: this.state.selected ? 0.1 : 0,\r\n\t\t\tstrokeWidth: 20,\r\n\t\t\tonContextMenu: () => {\r\n\t\t\t\tif (!this.props.diagramEngine.isModelLocked(this.props.link)) {\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tthis.props.link.remove();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<g key={\"link-\" + id}>\r\n\t\t\t\t{Bottom}\r\n\t\t\t\t{Top}\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n\r\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: any; position: number } => {\r\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\r\n\t\tconst lengths = this.refPaths.map(path => path.getTotalLength());\r\n\r\n\t\t// calculate the point where we want to display the label\r\n\t\tlet labelPosition =\r\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\r\n\t\t\t(index / (this.props.link.labels.length + 1));\r\n\r\n\t\t// find the path where the label will be rendered and calculate the relative position\r\n\t\tlet pathIndex = 0;\r\n\t\twhile (pathIndex < this.refPaths.length) {\r\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpath: this.refPaths[pathIndex],\r\n\t\t\t\t\tposition: labelPosition\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// keep searching\r\n\t\t\tlabelPosition -= lengths[pathIndex];\r\n\t\t\tpathIndex++;\r\n\t\t}\r\n\t};\r\n\r\n\tcalculateLabelPosition = (label, index: number) => {\r\n\t\tif (!this.refLabels[label.id]) {\r\n\t\t\t// no label? nothing to do here\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { path, position } = this.findPathAndRelativePositionToRenderLabel(index);\r\n\r\n\t\tconst labelDimensions = {\r\n\t\t\twidth: this.refLabels[label.id].offsetWidth,\r\n\t\t\theight: this.refLabels[label.id].offsetHeight\r\n\t\t};\r\n\r\n\t\tconst pathCentre = path.getPointAtLength(position);\r\n\r\n\t\tconst labelCoordinates = {\r\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + label.offsetX,\r\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + label.offsetY\r\n\t\t};\r\n\t\tthis.refLabels[label.id].setAttribute(\r\n\t\t\t\"style\",\r\n\t\t\t`transform: translate(${labelCoordinates.x}px, ${labelCoordinates.y}px);`\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t * Smart routing is only applicable when all conditions below are true:\r\n\t * - smart routing is set to true on the engine\r\n\t * - current link is between two nodes (not between a node and an empty point)\r\n\t * - no custom points exist along the line\r\n\t */\r\n\tisSmartRoutingApplicable(): boolean {\r\n\t\tconst { diagramEngine, link } = this.props;\r\n\r\n\t\tif (!diagramEngine.isSmartRoutingEnabled()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (link.points.length !== 2) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (link.sourcePort === null || link.targetPort === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { diagramEngine } = this.props;\r\n\t\tif (!diagramEngine.nodesRendered) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t//ensure id is present for all points on the path\r\n\t\tvar points = this.props.link.points;\r\n\t\tvar paths = [];\r\n\r\n\t\tif (this.isSmartRoutingApplicable()) {\r\n\t\t\t// first step: calculate a direct path between the points being linked\r\n\t\t\tconst directPathCoords = this.pathFinding.calculateDirectPath(_.first(points), _.last(points));\r\n\r\n\t\t\tconst routingMatrix = diagramEngine.getRoutingMatrix();\r\n\t\t\t// now we need to extract, from the routing matrix, the very first walkable points\r\n\t\t\t// so they can be used as origin and destination of the link to be created\r\n\t\t\tconst smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\r\n\r\n\t\t\tif (smartLink) {\r\n\t\t\t\tconst { start, end, pathToStart, pathToEnd } = smartLink;\r\n\r\n\t\t\t\t// second step: calculate a path avoiding hitting other elements\r\n\t\t\t\tconst simplifiedPath = this.pathFinding.calculateDynamicPath(\r\n\t\t\t\t\troutingMatrix,\r\n\t\t\t\t\tstart,\r\n\t\t\t\t\tend,\r\n\t\t\t\t\tpathToStart,\r\n\t\t\t\t\tpathToEnd\r\n\t\t\t\t);\r\n\r\n\t\t\t\tpaths.push(\r\n\t\t\t\t\t//smooth: boolean, extraProps: any, id: string | number, firstPoint: PointModel, lastPoint: PointModel\r\n\t\t\t\t\tthis.generateLink(\r\n\t\t\t\t\t\tToolkit.generateDynamicPath(simplifiedPath),\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tonMouseDown: event => {\r\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"0\"\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// true when smart routing was skipped or not enabled.\r\n\t\t// See @link{#isSmartRoutingApplicable()}.\r\n\t\tif (paths.length === 0) {\r\n\t\t\tif (points.length === 2) {\r\n\t\t\t\tvar isHorizontal = Math.abs(points[0].x - points[1].x) > Math.abs(points[0].y - points[1].y);\r\n\t\t\t\tvar xOrY = isHorizontal ? \"x\" : \"y\";\r\n\r\n\t\t\t\t//draw the smoothing\r\n\t\t\t\t//if the points are too close, just draw a straight line\r\n\t\t\t\tvar margin = 50;\r\n\t\t\t\tif (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\r\n\t\t\t\t\tmargin = 5;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar pointLeft = points[0];\r\n\t\t\t\tvar pointRight = points[1];\r\n\r\n\t\t\t\tpaths.push(\r\n\t\t\t\t\tthis.generateLink(\r\n\t\t\t\t\t\tToolkit.generateCurvePath(pointLeft, pointRight, this.props.link.curvyness),\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tonMouseDown: event => {\r\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"0\"\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// draw the link as dangeling\r\n\t\t\t\tif (this.props.link.targetPort === null) {\r\n\t\t\t\t\tpaths.push(this.generatePoint(1));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t//draw the multiple anchors and complex line instead\r\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\r\n\t\t\t\t\tpaths.push(\r\n\t\t\t\t\t\tthis.generateLink(\r\n\t\t\t\t\t\t\tToolkit.generateLinePath(points[j], points[j + 1]),\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"data-linkid\": this.props.link.id,\r\n\t\t\t\t\t\t\t\t\"data-point\": j,\r\n\t\t\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\r\n\t\t\t\t\t\t\t\t\tthis.addPointToLink(event, j + 1);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tj\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//render the circles\r\n\t\t\t\tfor (var i = 1; i < points.length - 1; i++) {\r\n\t\t\t\t\tpaths.push(this.generatePoint(i));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.props.link.targetPort === null) {\r\n\t\t\t\t\tpaths.push(this.generatePoint(points.length - 1));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.refPaths = [];\r\n\t\treturn (\r\n\t\t\t<g {...this.getProps()}>\r\n\t\t\t\t{paths}\r\n\t\t\t\t{_.map(this.props.link.labels, labelModel => {\r\n\t\t\t\t\treturn this.generateLabel(labelModel);\r\n\t\t\t\t})}\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\r\nimport { DefaultPortLabel } from \"./DefaultPortLabelWidget\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\r\n\r\nexport interface DefaultNodeProps extends BaseWidgetProps {\r\n\tnode: DefaultNodeModel;\r\n\tdiagramEngine: DiagramEngine;\r\n}\r\n\r\nexport interface DefaultNodeState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultNodeWidget extends BaseWidget<DefaultNodeProps, DefaultNodeState> {\r\n\tconstructor(props: DefaultNodeProps) {\r\n\t\tsuper(\"srd-default-node\", props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\tgeneratePort(port) {\r\n\t\treturn <DefaultPortLabel model={port} key={port.id} />;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div {...this.getProps()} style={{ background: this.props.node.color }}>\r\n\t\t\t\t<div className={this.bem(\"__title\")}>\r\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={this.bem(\"__ports\")}>\r\n\t\t\t\t\t<div className={this.bem(\"__in\")}>\r\n\t\t\t\t\t\t{_.map(this.props.node.getInPorts(), this.generatePort.bind(this))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={this.bem(\"__out\")}>\r\n\t\t\t\t\t\t{_.map(this.props.node.getOutPorts(), this.generatePort.bind(this))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\r\nimport { PortWidget } from \"../../widgets/PortWidget\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\r\n\r\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\r\n\tmodel: DefaultPortModel;\r\n}\r\n\r\nexport interface DefaultPortLabelState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultPortLabel extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\r\n\tconstructor(props) {\r\n\t\tsuper(\"srd-default-port\", props);\r\n\t}\r\n\r\n\tgetClassName() {\r\n\t\treturn super.getClassName() + (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--out\"));\r\n\t}\r\n\r\n\trender() {\r\n\t\tvar port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name} />;\r\n\t\tvar label = <div className=\"name\">{this.props.model.label}</div>;\r\n\r\n\t\treturn (\r\n\t\t\t<div {...this.getProps()}>\r\n\t\t\t\t{this.props.model.in ? port : label}\r\n\t\t\t\t{this.props.model.in ? label : port}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import { BaseModel } from \"../models/BaseModel\";\r\n\r\nexport abstract class AbstractFactory<T extends BaseModel> {\r\n\ttype: string;\r\n\r\n\tconstructor(name: string) {\r\n\t\tthis.type = name;\r\n\t}\r\n\r\n\tgetType(): string {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\tabstract getNewInstance(initialConfig?: any): T;\r\n}\r\n","import { LabelModel } from \"../models/LabelModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { AbstractFactory } from \"./AbstractFactory\";\r\n\r\nexport abstract class AbstractLabelFactory<T extends LabelModel = LabelModel> extends AbstractFactory<T> {\r\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, link: T): JSX.Element;\r\n}\r\n","import { LinkModel } from \"../models/LinkModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { AbstractFactory } from \"./AbstractFactory\";\r\n\r\nexport abstract class AbstractLinkFactory<T extends LinkModel = LinkModel> extends AbstractFactory<T> {\r\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, link: T): JSX.Element;\r\n}\r\n","import { NodeModel } from \"../models/NodeModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { AbstractFactory } from \"./AbstractFactory\";\r\n\r\nexport abstract class AbstractNodeFactory<T extends NodeModel = NodeModel> extends AbstractFactory<T> {\r\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, node: T): JSX.Element;\r\n}\r\n","import { PortModel } from \"../models/PortModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { AbstractFactory } from \"./AbstractFactory\";\r\n\r\nexport abstract class AbstractPortFactory<T extends PortModel = PortModel> extends AbstractFactory<T> {}\r\n","/**\r\n * @author Dylan Vorster\r\n */\r\n\r\nexport * from \"./Toolkit\";\r\nexport * from \"./BaseEntity\";\r\nexport * from \"./DiagramEngine\";\r\n\r\nexport * from \"./defaults/models/DefaultNodeModel\";\r\nexport * from \"./defaults/models/DefaultPortModel\";\r\nexport * from \"./defaults/models/DefaultLinkModel\";\r\nexport * from \"./defaults/models/DefaultLabelModel\";\r\n\r\nexport * from \"./defaults/factories/DefaultLinkFactory\";\r\nexport * from \"./defaults/factories/DefaultNodeFactory\";\r\nexport * from \"./defaults/factories/DefaultPortFactory\";\r\nexport * from \"./defaults/factories/DefaultLabelFactory\";\r\n\r\nexport * from \"./defaults/widgets/DefaultLinkWidget\";\r\nexport * from \"./defaults/widgets/DefaultLabelWidget\";\r\nexport * from \"./defaults/widgets/DefaultNodeWidget\";\r\nexport * from \"./defaults/widgets/DefaultPortLabelWidget\";\r\n\r\nexport * from \"./factories/AbstractFactory\";\r\nexport * from \"./factories/AbstractLabelFactory\";\r\nexport * from \"./factories/AbstractLinkFactory\";\r\nexport * from \"./factories/AbstractNodeFactory\";\r\nexport * from \"./factories/AbstractPortFactory\";\r\n\r\nexport * from \"./routing/PathFinding\";\r\n\r\nexport * from \"./actions/BaseAction\";\r\nexport * from \"./actions/MoveCanvasAction\";\r\nexport * from \"./actions/MoveItemsAction\";\r\nexport * from \"./actions/SelectingAction\";\r\n\r\nexport * from \"./models/SelectionModel\";\r\nexport * from \"./models/BaseModel\";\r\nexport * from \"./models/DiagramModel\";\r\nexport * from \"./models/LinkModel\";\r\nexport * from \"./models/NodeModel\";\r\nexport * from \"./models/PointModel\";\r\nexport * from \"./models/PortModel\";\r\nexport * from \"./models/LabelModel\";\r\n\r\nexport * from \"./widgets/DiagramWidget\";\r\nexport * from \"./widgets/LinkWidget\";\r\nexport * from \"./widgets/NodeWidget\";\r\nexport * from \"./widgets/PortWidget\";\r\nexport * from \"./widgets/BaseWidget\";\r\n\r\nexport * from \"./widgets/layers/LinkLayerWidget\";\r\nexport * from \"./widgets/layers/NodeLayerWidget\";\r\n","import { BaseEntity, BaseListener } from \"../BaseEntity\";\r\nimport * as _ from \"lodash\";\r\nimport { BaseEvent } from \"../BaseEntity\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { PointModel } from \"../models/PointModel\";\r\n\r\nexport interface BaseModelListener extends BaseListener {\r\n\tselectionChanged?(event: BaseEvent<BaseModel> & { isSelected: boolean }): void;\r\n\r\n\tentityRemoved?(event: BaseEvent<BaseModel>): void;\r\n}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class BaseModel<\r\n\tX extends BaseEntity = BaseEntity,\r\n\tT extends BaseModelListener = BaseModelListener\r\n> extends BaseEntity<T> {\r\n\ttype: string;\r\n\tselected: boolean;\r\n\tparent: X;\r\n\r\n\tconstructor(type?: string, id?: string) {\r\n\t\tsuper(id);\r\n\t\tthis.type = type;\r\n\t\tthis.selected = false;\r\n\t}\r\n\r\n\tpublic getParent(): X {\r\n\t\treturn this.parent;\r\n\t}\r\n\r\n\tpublic setParent(parent: X) {\r\n\t\tthis.parent = parent;\r\n\t}\r\n\r\n\tpublic getSelectedEntities(): Array<BaseModel<any, T> | PointModel> {\r\n\t\tif (this.isSelected()) {\r\n\t\t\treturn [this];\r\n\t\t}\r\n\t\treturn [];\r\n\t}\r\n\r\n\tpublic deSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.type = ob.type;\r\n\t\tthis.selected = ob.selected;\r\n\t}\r\n\r\n\tpublic serialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\ttype: this.type,\r\n\t\t\tselected: this.selected\r\n\t\t});\r\n\t}\r\n\r\n\tpublic getType(): string {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\tpublic getID(): string {\r\n\t\treturn this.id;\r\n\t}\r\n\r\n\tpublic isSelected(): boolean {\r\n\t\treturn this.selected;\r\n\t}\r\n\r\n\tpublic setSelected(selected: boolean = true) {\r\n\t\tthis.selected = selected;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.selectionChanged) {\r\n\t\t\t\tlistener.selectionChanged({ ...event, isSelected: selected });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic remove() {\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.entityRemoved) {\r\n\t\t\t\tlistener.entityRemoved(event);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","import { BaseListener, BaseEntity, BaseEvent, BaseEntityType } from \"../BaseEntity\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { LinkModel } from \"./LinkModel\";\r\nimport { NodeModel } from \"./NodeModel\";\r\nimport { PortModel } from \"./PortModel\";\r\nimport { BaseModel, BaseModelListener } from \"./BaseModel\";\r\nimport { PointModel } from \"./PointModel\";\r\n/**\r\n * @author Dylan Vorster\r\n *\r\n */\r\nexport interface DiagramListener extends BaseListener {\r\n\tnodesUpdated?(event: BaseEvent & { node: NodeModel; isCreated: boolean }): void;\r\n\r\n\tlinksUpdated?(event: BaseEvent & { link: LinkModel; isCreated: boolean }): void;\r\n\r\n\toffsetUpdated?(event: BaseEvent<DiagramModel> & { offsetX: number; offsetY: number }): void;\r\n\r\n\tzoomUpdated?(event: BaseEvent<DiagramModel> & { zoom: number }): void;\r\n\r\n\tgridUpdated?(event: BaseEvent<DiagramModel> & { size: number }): void;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class DiagramModel extends BaseEntity<DiagramListener> {\r\n\t//models\r\n\tlinks: { [s: string]: LinkModel };\r\n\tnodes: { [s: string]: NodeModel };\r\n\r\n\t//control variables\r\n\toffsetX: number;\r\n\toffsetY: number;\r\n\tzoom: number;\r\n\trendered: boolean;\r\n\tgridSize: number;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.links = {};\r\n\t\tthis.nodes = {};\r\n\r\n\t\tthis.offsetX = 0;\r\n\t\tthis.offsetY = 0;\r\n\t\tthis.zoom = 100;\r\n\t\tthis.rendered = false;\r\n\t\tthis.gridSize = 0;\r\n\t}\r\n\r\n\tsetGridSize(size: number = 0) {\r\n\t\tthis.gridSize = size;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.gridUpdated) {\r\n\t\t\t\tlistener.gridUpdated({ ...event, size: size });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetGridPosition(pos) {\r\n\t\tif (this.gridSize === 0) {\r\n\t\t\treturn pos;\r\n\t\t}\r\n\t\treturn this.gridSize * Math.floor((pos + this.gridSize / 2) / this.gridSize);\r\n\t}\r\n\r\n\tdeSerializeDiagram(object: any, diagramEngine: DiagramEngine) {\r\n\t\tthis.deSerialize(object, diagramEngine);\r\n\r\n\t\tthis.offsetX = object.offsetX;\r\n\t\tthis.offsetY = object.offsetY;\r\n\t\tthis.zoom = object.zoom;\r\n\t\tthis.gridSize = object.gridSize;\r\n\r\n\t\t// deserialize nodes\r\n\t\t_.forEach(object.nodes, (node: any) => {\r\n\t\t\tlet nodeOb = diagramEngine.getNodeFactory(node.type).getNewInstance(node);\r\n\t\t\tnodeOb.setParent(this);\r\n\t\t\tnodeOb.deSerialize(node, diagramEngine);\r\n\t\t\tthis.addNode(nodeOb);\r\n\t\t});\r\n\r\n\t\t// deserialze links\r\n\t\t_.forEach(object.links, (link: any) => {\r\n\t\t\tlet linkOb = diagramEngine.getLinkFactory(link.type).getNewInstance();\r\n\t\t\tlinkOb.setParent(this);\r\n\t\t\tlinkOb.deSerialize(link, diagramEngine);\r\n\t\t\tthis.addLink(linkOb);\r\n\t\t});\r\n\t}\r\n\r\n\tserializeDiagram() {\r\n\t\treturn _.merge(this.serialize(), {\r\n\t\t\toffsetX: this.offsetX,\r\n\t\t\toffsetY: this.offsetY,\r\n\t\t\tzoom: this.zoom,\r\n\t\t\tgridSize: this.gridSize,\r\n\t\t\tlinks: _.map(this.links, link => {\r\n\t\t\t\treturn link.serialize();\r\n\t\t\t}),\r\n\t\t\tnodes: _.map(this.nodes, node => {\r\n\t\t\t\treturn node.serialize();\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tclearSelection(ignore: BaseModel<BaseEntity, BaseModelListener> | null = null) {\r\n\t\t_.forEach(this.getSelectedItems(), element => {\r\n\t\t\tif (ignore && ignore.getID() === element.getID()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telement.setSelected(false); //TODO dont fire the listener\r\n\t\t});\r\n\t}\r\n\r\n\tgetSelectedItems(...filters: BaseEntityType[]): BaseModel<BaseEntity, BaseModelListener>[] {\r\n\t\tif (!Array.isArray(filters)) {\r\n\t\t\tfilters = [filters];\r\n\t\t}\r\n\t\tvar items = [];\r\n\r\n\t\t// run through nodes\r\n\t\titems = items.concat(\r\n\t\t\t_.flatMap(this.nodes, node => {\r\n\t\t\t\treturn node.getSelectedEntities();\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\t// find all the links\r\n\t\titems = items.concat(\r\n\t\t\t_.flatMap(this.links, link => {\r\n\t\t\t\treturn link.getSelectedEntities();\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\t//find all points\r\n\t\titems = items.concat(\r\n\t\t\t_.flatMap(this.links, link => {\r\n\t\t\t\treturn _.flatMap(link.points, point => {\r\n\t\t\t\t\treturn point.getSelectedEntities();\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\titems = _.uniq(items);\r\n\r\n\t\tif (filters.length > 0) {\r\n\t\t\titems = _.filter(_.uniq(items), (item: BaseModel<any>) => {\r\n\t\t\t\tif (_.includes(filters, \"node\") && item instanceof NodeModel) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (_.includes(filters, \"link\") && item instanceof LinkModel) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (_.includes(filters, \"port\") && item instanceof PortModel) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (_.includes(filters, \"point\") && item instanceof PointModel) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn items;\r\n\t}\r\n\r\n\tsetZoomLevel(zoom: number) {\r\n\t\tthis.zoom = zoom;\r\n\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.zoomUpdated) {\r\n\t\t\t\tlistener.zoomUpdated({ ...event, zoom: zoom });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetOffset(offsetX: number, offsetY: number) {\r\n\t\tthis.offsetX = offsetX;\r\n\t\tthis.offsetY = offsetY;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.offsetUpdated) {\r\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: offsetX, offsetY: offsetY });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetOffsetX(offsetX: number) {\r\n\t\tthis.offsetX = offsetX;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.offsetUpdated) {\r\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: offsetX, offsetY: this.offsetY });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tsetOffsetY(offsetY: number) {\r\n\t\tthis.offsetY = offsetY;\r\n\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.offsetUpdated) {\r\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: this.offsetX, offsetY: this.offsetY });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetOffsetY() {\r\n\t\treturn this.offsetY;\r\n\t}\r\n\r\n\tgetOffsetX() {\r\n\t\treturn this.offsetX;\r\n\t}\r\n\r\n\tgetZoomLevel() {\r\n\t\treturn this.zoom;\r\n\t}\r\n\r\n\tgetNode(node: string | NodeModel): NodeModel | null {\r\n\t\tif (node instanceof NodeModel) {\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\tif (!this.nodes[node]) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.nodes[node];\r\n\t}\r\n\r\n\tgetLink(link: string | LinkModel): LinkModel | null {\r\n\t\tif (link instanceof LinkModel) {\r\n\t\t\treturn link;\r\n\t\t}\r\n\t\tif (!this.links[link]) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.links[link];\r\n\t}\r\n\r\n\taddAll(...models: BaseModel[]): BaseModel[] {\r\n\t\t_.forEach(models, model => {\r\n\t\t\tif (model instanceof LinkModel) {\r\n\t\t\t\tthis.addLink(model);\r\n\t\t\t} else if (model instanceof NodeModel) {\r\n\t\t\t\tthis.addNode(model);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn models;\r\n\t}\r\n\r\n\taddLink(link: LinkModel): LinkModel {\r\n\t\tlink.addListener({\r\n\t\t\tentityRemoved: () => {\r\n\t\t\t\tthis.removeLink(link);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.links[link.getID()] = link;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.linksUpdated) {\r\n\t\t\t\tlistener.linksUpdated({ ...event, link: link, isCreated: true });\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn link;\r\n\t}\r\n\r\n\taddNode(node: NodeModel): NodeModel {\r\n\t\tnode.addListener({\r\n\t\t\tentityRemoved: () => {\r\n\t\t\t\tthis.removeNode(node);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.nodes[node.getID()] = node;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.nodesUpdated) {\r\n\t\t\t\tlistener.nodesUpdated({ ...event, node: node, isCreated: true });\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn node;\r\n\t}\r\n\r\n\tremoveLink(link: LinkModel | string) {\r\n\t\tlink = this.getLink(link);\r\n\t\tdelete this.links[link.getID()];\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.linksUpdated) {\r\n\t\t\t\tlistener.linksUpdated({ ...event, link: link as LinkModel, isCreated: false });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tremoveNode(node: NodeModel | string) {\r\n\t\tnode = this.getNode(node);\r\n\t\tdelete this.nodes[node.getID()];\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.nodesUpdated) {\r\n\t\t\t\tlistener.nodesUpdated({ ...event, node: node as NodeModel, isCreated: false });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetLinks(): { [s: string]: LinkModel } {\r\n\t\treturn this.links;\r\n\t}\r\n\r\n\tgetNodes(): { [s: string]: NodeModel } {\r\n\t\treturn this.nodes;\r\n\t}\r\n}\r\n","import { BaseModel } from \"./BaseModel\";\r\nimport { LinkModel } from \"./LinkModel\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\n\r\nexport class LabelModel extends BaseModel<LinkModel> {\r\n\toffsetX: number;\r\n\toffsetY: number;\r\n\r\n\tconstructor(type?: string, id?: string) {\r\n\t\tsuper(type, id);\r\n\t\tthis.offsetX = 0;\r\n\t\tthis.offsetY = 0;\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.offsetX = ob.offsetX;\r\n\t\tthis.offsetY = ob.offsetY;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\toffsetX: this.offsetX,\r\n\t\t\toffsetY: this.offsetY\r\n\t\t});\r\n\t}\r\n}\r\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\r\nimport { PortModel } from \"./PortModel\";\r\nimport { PointModel } from \"./PointModel\";\r\nimport * as _ from \"lodash\";\r\nimport { BaseEvent } from \"../BaseEntity\";\r\nimport { LabelModel } from \"./LabelModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { DiagramModel } from \"./DiagramModel\";\r\n\r\nexport interface LinkModelListener extends BaseModelListener {\r\n\tsourcePortChanged?(event: BaseEvent<LinkModel> & { port: null | PortModel }): void;\r\n\r\n\ttargetPortChanged?(event: BaseEvent<LinkModel> & { port: null | PortModel }): void;\r\n}\r\n\r\nexport class LinkModel<T extends LinkModelListener = LinkModelListener> extends BaseModel<DiagramModel, T> {\r\n\tsourcePort: PortModel | null;\r\n\ttargetPort: PortModel | null;\r\n\tlabels: LabelModel[];\r\n\tpoints: PointModel[];\r\n\textras: any;\r\n\r\n\tconstructor(linkType: string = \"default\", id?: string) {\r\n\t\tsuper(linkType, id);\r\n\t\tthis.points = [new PointModel(this, { x: 0, y: 0 }), new PointModel(this, { x: 0, y: 0 })];\r\n\t\tthis.extras = {};\r\n\t\tthis.sourcePort = null;\r\n\t\tthis.targetPort = null;\r\n\t\tthis.labels = [];\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.extras = ob.extras;\r\n\t\tthis.points = _.map(ob.points || [], (point: { x; y }) => {\r\n\t\t\tvar p = new PointModel(this, { x: point.x, y: point.y });\r\n\t\t\tp.deSerialize(point, engine);\r\n\t\t\treturn p;\r\n\t\t});\r\n\r\n\t\t//deserialize labels\r\n\t\t_.forEach(ob.labels || [], (label: any) => {\r\n\t\t\tlet labelOb = engine.getLabelFactory(label.type).getNewInstance();\r\n\t\t\tlabelOb.deSerialize(label, engine);\r\n\t\t\tthis.addLabel(labelOb);\r\n\t\t});\r\n\r\n\t\tif (ob.target) {\r\n\t\t\tthis.setTargetPort(\r\n\t\t\t\tthis.getParent()\r\n\t\t\t\t\t.getNode(ob.target)\r\n\t\t\t\t\t.getPortFromID(ob.targetPort)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (ob.source) {\r\n\t\t\tthis.setSourcePort(\r\n\t\t\t\tthis.getParent()\r\n\t\t\t\t\t.getNode(ob.source)\r\n\t\t\t\t\t.getPortFromID(ob.sourcePort)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().id : null,\r\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.id : null,\r\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().id : null,\r\n\t\t\ttargetPort: this.targetPort ? this.targetPort.id : null,\r\n\t\t\tpoints: _.map(this.points, point => {\r\n\t\t\t\treturn point.serialize();\r\n\t\t\t}),\r\n\t\t\textras: this.extras,\r\n\t\t\tlabels: _.map(this.labels, label => {\r\n\t\t\t\treturn label.serialize();\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tdoClone(lookupTable = {}, clone) {\r\n\t\tclone.setPoints(\r\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\r\n\t\t\t\treturn point.clone(lookupTable);\r\n\t\t\t})\r\n\t\t);\r\n\t\tif (this.sourcePort) {\r\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\r\n\t\t}\r\n\t\tif (this.targetPort) {\r\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\r\n\t\t}\r\n\t}\r\n\r\n\tremove() {\r\n\t\tif (this.sourcePort) {\r\n\t\t\tthis.sourcePort.removeLink(this);\r\n\t\t}\r\n\t\tif (this.targetPort) {\r\n\t\t\tthis.targetPort.removeLink(this);\r\n\t\t}\r\n\t\tsuper.remove();\r\n\t}\r\n\r\n\tisLastPoint(point: PointModel) {\r\n\t\tvar index = this.getPointIndex(point);\r\n\t\treturn index === this.points.length - 1;\r\n\t}\r\n\r\n\tgetPointIndex(point: PointModel) {\r\n\t\treturn this.points.indexOf(point);\r\n\t}\r\n\r\n\tgetPointModel(id: string): PointModel | null {\r\n\t\tfor (var i = 0; i < this.points.length; i++) {\r\n\t\t\tif (this.points[i].id === id) {\r\n\t\t\t\treturn this.points[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetPortForPoint(point: PointModel): PortModel {\r\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\r\n\t\t\treturn this.sourcePort;\r\n\t\t}\r\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\r\n\t\t\treturn this.targetPort;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetPointForPort(port: PortModel): PointModel {\r\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\r\n\t\t\treturn this.getFirstPoint();\r\n\t\t}\r\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\r\n\t\t\treturn this.getLastPoint();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetFirstPoint(): PointModel {\r\n\t\treturn this.points[0];\r\n\t}\r\n\r\n\tgetLastPoint(): PointModel {\r\n\t\treturn this.points[this.points.length - 1];\r\n\t}\r\n\r\n\tsetSourcePort(port: PortModel) {\r\n\t\tif (port !== null) {\r\n\t\t\tport.addLink(this);\r\n\t\t}\r\n\t\tif (this.sourcePort !== null) {\r\n\t\t\tthis.sourcePort.removeLink(this);\r\n\t\t}\r\n\t\tthis.sourcePort = port;\r\n\t\tthis.iterateListeners((listener: LinkModelListener, event) => {\r\n\t\t\tif (listener.sourcePortChanged) {\r\n\t\t\t\tlistener.sourcePortChanged({ ...event, port: port });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetSourcePort(): PortModel {\r\n\t\treturn this.sourcePort;\r\n\t}\r\n\r\n\tgetTargetPort(): PortModel {\r\n\t\treturn this.targetPort;\r\n\t}\r\n\r\n\tsetTargetPort(port: PortModel) {\r\n\t\tif (port !== null) {\r\n\t\t\tport.addLink(this);\r\n\t\t}\r\n\t\tif (this.targetPort !== null) {\r\n\t\t\tthis.targetPort.removeLink(this);\r\n\t\t}\r\n\t\tthis.targetPort = port;\r\n\t\tthis.iterateListeners((listener: LinkModelListener, event) => {\r\n\t\t\tif (listener.targetPortChanged) {\r\n\t\t\t\tlistener.targetPortChanged({ ...event, port: port });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpoint(x: number, y: number): PointModel {\r\n\t\treturn this.addPoint(this.generatePoint(x, y));\r\n\t}\r\n\r\n\taddLabel(label: LabelModel) {\r\n\t\tlabel.setParent(this);\r\n\t\tthis.labels.push(label);\r\n\t}\r\n\r\n\tgetPoints(): PointModel[] {\r\n\t\treturn this.points;\r\n\t}\r\n\r\n\tsetPoints(points: PointModel[]) {\r\n\t\t_.forEach(points, point => {\r\n\t\t\tpoint.setParent(this);\r\n\t\t});\r\n\t\tthis.points = points;\r\n\t}\r\n\r\n\tremovePoint(pointModel: PointModel) {\r\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\r\n\t}\r\n\r\n\tremovePointsBefore(pointModel: PointModel) {\r\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\r\n\t}\r\n\r\n\tremovePointsAfter(pointModel: PointModel) {\r\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\r\n\t}\r\n\r\n\tremoveMiddlePoints() {\r\n\t\tif (this.points.length > 2) {\r\n\t\t\tthis.points.splice(0, this.points.length - 2);\r\n\t\t}\r\n\t}\r\n\r\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\r\n\t\tpointModel.setParent(this);\r\n\t\tthis.points.splice(index, 0, pointModel);\r\n\t\treturn pointModel;\r\n\t}\r\n\r\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\r\n\t\treturn new PointModel(this, { x: x, y: y });\r\n\t}\r\n}\r\n","import { BaseEvent } from \"../BaseEntity\";\r\nimport { BaseModel, BaseModelListener } from \"./BaseModel\";\r\nimport { LinkModel, LinkModelListener } from \"./LinkModel\";\r\nimport { PortModel } from \"./PortModel\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { DiagramModel } from \"./DiagramModel\";\r\nimport { PointModel } from \"./PointModel\";\r\n\r\nexport interface NodeModelListener extends BaseModelListener {\r\n\tpositionChanged?(event: BaseEvent<NodeModel>): void;\r\n}\r\n\r\nexport class NodeModel<T extends NodeModelListener = NodeModelListener> extends BaseModel<DiagramModel, T> {\r\n\tx: number;\r\n\ty: number;\r\n\textras: any;\r\n\tports: { [s: string]: PortModel };\r\n\r\n\t// calculated post rendering so routing can be done correctly\r\n\twidth: number;\r\n\theight: number;\r\n\r\n\tconstructor(nodeType: string = \"default\", id?: string) {\r\n\t\tsuper(nodeType, id);\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\t\tthis.extras = {};\r\n\t\tthis.ports = {};\r\n\t}\r\n\r\n\tsetPosition(x, y) {\r\n\t\t//store position\r\n\t\tlet oldX = this.x;\r\n\t\tlet oldY = this.y;\r\n\t\t_.forEach(this.ports, port => {\r\n\t\t\t_.forEach(port.getLinks(), link => {\r\n\t\t\t\tlet point = link.getPointForPort(port);\r\n\t\t\t\tpoint.x = point.x + x - oldX;\r\n\t\t\t\tpoint.y = point.y + y - oldY;\r\n\t\t\t});\r\n\t\t});\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\tpositionChanged() {\r\n\t\tthis.iterateListeners(\r\n\t\t\t(listener: NodeModelListener, event) => listener.positionChanged && listener.positionChanged(event)\r\n\t\t);\r\n\t}\r\n\r\n\tgetSelectedEntities() {\r\n\t\tlet entities = super.getSelectedEntities();\r\n\r\n\t\t// add the points of each link that are selected here\r\n\t\tif (this.isSelected()) {\r\n\t\t\t_.forEach(this.ports, port => {\r\n\t\t\t\tentities = entities.concat(\r\n\t\t\t\t\t_.map(port.getLinks(), link => {\r\n\t\t\t\t\t\treturn link.getPointForPort(port);\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn entities;\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.x = ob.x;\r\n\t\tthis.y = ob.y;\r\n\t\tthis.extras = ob.extras;\r\n\r\n\t\t//deserialize ports\r\n\t\t_.forEach(ob.ports, (port: any) => {\r\n\t\t\tlet portOb = engine.getPortFactory(port.type).getNewInstance();\r\n\t\t\tportOb.deSerialize(port, engine);\r\n\t\t\tthis.addPort(portOb);\r\n\t\t});\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tx: this.x,\r\n\t\t\ty: this.y,\r\n\t\t\textras: this.extras,\r\n\t\t\tports: _.map(this.ports, port => {\r\n\t\t\t\treturn port.serialize();\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tdoClone(lookupTable = {}, clone) {\r\n\t\t// also clone the ports\r\n\t\tclone.ports = {};\r\n\t\t_.forEach(this.ports, port => {\r\n\t\t\tclone.addPort(port.clone(lookupTable));\r\n\t\t});\r\n\t}\r\n\r\n\tremove() {\r\n\t\tsuper.remove();\r\n\t\t_.forEach(this.ports, port => {\r\n\t\t\t_.forEach(port.getLinks(), link => {\r\n\t\t\t\tlink.remove();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgetPortFromID(id): PortModel | null {\r\n\t\tfor (var i in this.ports) {\r\n\t\t\tif (this.ports[i].id === id) {\r\n\t\t\t\treturn this.ports[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetPort(name: string): PortModel | null {\r\n\t\treturn this.ports[name];\r\n\t}\r\n\r\n\tgetPorts(): { [s: string]: PortModel } {\r\n\t\treturn this.ports;\r\n\t}\r\n\r\n\tremovePort(port: PortModel) {\r\n\t\t//clear the parent node reference\r\n\t\tif (this.ports[port.name]) {\r\n\t\t\tthis.ports[port.name].setParent(null);\r\n\t\t\tdelete this.ports[port.name];\r\n\t\t}\r\n\t}\r\n\r\n\taddPort<T extends PortModel>(port: T): T {\r\n\t\tport.setParent(this);\r\n\t\tthis.ports[port.name] = port;\r\n\t\treturn port;\r\n\t}\r\n\r\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n}\r\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\r\nimport { LinkModel } from \"./LinkModel\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\n\r\nexport class PointModel extends BaseModel<LinkModel, BaseModelListener> {\r\n\tx: number;\r\n\ty: number;\r\n\r\n\tconstructor(link: LinkModel, points: { x: number; y: number }) {\r\n\t\tsuper();\r\n\t\tthis.x = points.x;\r\n\t\tthis.y = points.y;\r\n\t\tthis.parent = link;\r\n\t}\r\n\r\n\tgetSelectedEntities() {\r\n\t\tif (super.isSelected() && !this.isConnectedToPort()) {\r\n\t\t\treturn [this];\r\n\t\t}\r\n\t\treturn [];\r\n\t}\r\n\r\n\tisConnectedToPort(): boolean {\r\n\t\treturn this.parent.getPortForPoint(this) !== null;\r\n\t}\r\n\r\n\tgetLink(): LinkModel {\r\n\t\treturn this.getParent();\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.x = ob.x;\r\n\t\tthis.y = ob.y;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tx: this.x,\r\n\t\t\ty: this.y\r\n\t\t});\r\n\t}\r\n\r\n\tremove() {\r\n\t\t//clear references\r\n\t\tif (this.parent) {\r\n\t\t\tthis.parent.removePoint(this);\r\n\t\t}\r\n\t\tsuper.remove();\r\n\t}\r\n\r\n\tupdateLocation(points: { x: number; y: number }) {\r\n\t\tthis.x = points.x;\r\n\t\tthis.y = points.y;\r\n\t}\r\n\r\n\tgetX(): number {\r\n\t\treturn this.x;\r\n\t}\r\n\r\n\tgetY(): number {\r\n\t\treturn this.y;\r\n\t}\r\n\r\n\tisLocked() {\r\n\t\treturn super.isLocked() || this.getParent().isLocked();\r\n\t}\r\n}\r\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\r\nimport { NodeModel } from \"./NodeModel\";\r\nimport { LinkModel } from \"./LinkModel\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\n\r\nexport class PortModel extends BaseModel<NodeModel, BaseModelListener> {\r\n\tname: string;\r\n\tlinks: { [id: string]: LinkModel };\r\n\tmaximumLinks: number;\r\n\r\n\t// calculated post rendering so routing can be done correctly\r\n\tx: number;\r\n\ty: number;\r\n\twidth: number;\r\n\theight: number;\r\n\r\n\tconstructor(name: string, type?: string, id?: string, maximumLinks?: number) {\r\n\t\tsuper(type, id);\r\n\t\tthis.name = name;\r\n\t\tthis.links = {};\r\n\t\tthis.maximumLinks = maximumLinks;\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.name = ob.name;\r\n\t\tthis.maximumLinks = ob.maximumLinks;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tname: this.name,\r\n\t\t\tparentNode: this.parent.id,\r\n\t\t\tlinks: _.map(this.links, link => {\r\n\t\t\t\treturn link.id;\r\n\t\t\t}),\r\n\t\t\tmaximumLinks: this.maximumLinks\r\n\t\t});\r\n\t}\r\n\r\n\tdoClone(lookupTable = {}, clone) {\r\n\t\tclone.links = {};\r\n\t\tclone.parentNode = this.getParent().clone(lookupTable);\r\n\t}\r\n\r\n\tgetNode(): NodeModel {\r\n\t\treturn this.getParent();\r\n\t}\r\n\r\n\tgetName(): string {\r\n\t\treturn this.name;\r\n\t}\r\n\r\n\tgetMaximumLinks(): number {\r\n\t\treturn this.maximumLinks;\r\n\t}\r\n\r\n\tsetMaximumLinks(maximumLinks: number) {\r\n\t\tthis.maximumLinks = maximumLinks;\r\n\t}\r\n\r\n\tremoveLink(link: LinkModel) {\r\n\t\tdelete this.links[link.getID()];\r\n\t}\r\n\r\n\taddLink(link: LinkModel) {\r\n\t\tthis.links[link.getID()] = link;\r\n\t}\r\n\r\n\tgetLinks(): { [id: string]: LinkModel } {\r\n\t\treturn this.links;\r\n\t}\r\n\r\n\tpublic createLinkModel(): LinkModel | null {\r\n\t\tif (_.isFinite(this.maximumLinks)) {\r\n\t\t\tvar numberOfLinks: number = _.size(this.links);\r\n\t\t\tif (this.maximumLinks === 1 && numberOfLinks >= 1) {\r\n\t\t\t\treturn _.values(this.links)[0];\r\n\t\t\t} else if (numberOfLinks >= this.maximumLinks) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tupdateCoords({ x, y, width, height }: { x: number; y: number; width: number; height: number }) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tisLocked() {\r\n\t\treturn super.isLocked() || this.getParent().isLocked();\r\n\t}\r\n}\r\n","import * as PF from \"pathfinding\";\r\nimport { DiagramEngine } from \"../main\";\r\n\r\n/*\r\nit can be very expensive to calculate routes when every single pixel on the canvas\r\nis individually represented. Using the factor below, we combine values in order\r\nto achieve the best trade-off between accuracy and performance.\r\n*/\r\nexport const ROUTING_SCALING_FACTOR = 5;\r\n\r\nconst pathFinderInstance = new PF.JumpPointFinder({\r\n\theuristic: PF.Heuristic.manhattan,\r\n\tdiagonalMovement: PF.DiagonalMovement.Never\r\n});\r\n\r\nexport default class PathFinding {\r\n\tinstance: any;\r\n\tdiagramEngine: DiagramEngine;\r\n\r\n\tconstructor(diagramEngine: DiagramEngine) {\r\n\t\tthis.instance = pathFinderInstance;\r\n\t\tthis.diagramEngine = diagramEngine;\r\n\t}\r\n\r\n\t/**\r\n\t * Taking as argument a fully unblocked walking matrix, this method\r\n\t * finds a direct path from point A to B.\r\n\t */\r\n\tcalculateDirectPath(\r\n\t\tfrom: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t},\r\n\t\tto: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t}\r\n\t): number[][] {\r\n\t\tconst matrix = this.diagramEngine.getCanvasMatrix();\r\n\t\tconst grid = new PF.Grid(matrix);\r\n\r\n\t\treturn pathFinderInstance.findPath(\r\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(from.x / ROUTING_SCALING_FACTOR)),\r\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(from.y / ROUTING_SCALING_FACTOR)),\r\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(to.x / ROUTING_SCALING_FACTOR)),\r\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(to.y / ROUTING_SCALING_FACTOR)),\r\n\t\t\tgrid\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Using @link{#calculateDirectPath}'s result as input, we here\r\n\t * determine the first walkable point found in the matrix that includes\r\n\t * blocked paths.\r\n\t */\r\n\tcalculateLinkStartEndCoords(\r\n\t\tmatrix: number[][],\r\n\t\tpath: number[][]\r\n\t): {\r\n\t\tstart: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t};\r\n\t\tend: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t};\r\n\t\tpathToStart: number[][];\r\n\t\tpathToEnd: number[][];\r\n\t} {\r\n\t\tconst startIndex = path.findIndex(point => matrix[point[1]][point[0]] === 0);\r\n\t\tconst endIndex =\r\n\t\t\tpath.length -\r\n\t\t\t1 -\r\n\t\t\tpath\r\n\t\t\t\t.slice()\r\n\t\t\t\t.reverse()\r\n\t\t\t\t.findIndex(point => matrix[point[1]][point[0]] === 0);\r\n\r\n\t\t// are we trying to create a path exclusively through blocked areas?\r\n\t\t// if so, let's fallback to the linear routing\r\n\t\tif (startIndex === -1 || endIndex === -1) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst pathToStart = path.slice(0, startIndex);\r\n\t\tconst pathToEnd = path.slice(endIndex);\r\n\r\n\t\treturn {\r\n\t\t\tstart: {\r\n\t\t\t\tx: path[startIndex][0],\r\n\t\t\t\ty: path[startIndex][1]\r\n\t\t\t},\r\n\t\t\tend: {\r\n\t\t\t\tx: path[endIndex][0],\r\n\t\t\t\ty: path[endIndex][1]\r\n\t\t\t},\r\n\t\t\tpathToStart,\r\n\t\t\tpathToEnd\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Puts everything together: merges the paths from/to the centre of the ports,\r\n\t * with the path calculated around other elements.\r\n\t */\r\n\tcalculateDynamicPath(\r\n\t\troutingMatrix: number[][],\r\n\t\tstart: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t},\r\n\t\tend: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t},\r\n\t\tpathToStart: number[][],\r\n\t\tpathToEnd: number[][]\r\n\t) {\r\n\t\t// generate the path based on the matrix with obstacles\r\n\t\tconst grid = new PF.Grid(routingMatrix);\r\n\t\tconst dynamicPath = pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\r\n\r\n\t\t// aggregate everything to have the calculated path ready for rendering\r\n\t\tconst pathCoords = pathToStart\r\n\t\t\t.concat(dynamicPath, pathToEnd)\r\n\t\t\t.map(coords => [\r\n\t\t\t\tthis.diagramEngine.translateRoutingX(coords[0], true),\r\n\t\t\t\tthis.diagramEngine.translateRoutingY(coords[1], true)\r\n\t\t\t]);\r\n\t\treturn PF.Util.compressPath(pathCoords);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport interface BaseWidgetProps {\r\n\t/**\r\n\t * Override the base class name\r\n\t */\r\n\tbaseClass?: string;\r\n\t/**\r\n\t * append additional classes\r\n\t */\r\n\tclassName?: string;\r\n\r\n\t/**\r\n\t * Additional props to add\r\n\t */\r\n\textraProps?: any;\r\n}\r\n\r\nexport class BaseWidget<P extends BaseWidgetProps = BaseWidgetProps, S = any> extends React.Component<P, S> {\r\n\tclassName: string;\r\n\r\n\tconstructor(name: string, props: P) {\r\n\t\tsuper(props);\r\n\t\tthis.className = name;\r\n\t}\r\n\r\n\tbem(selector: string): string {\r\n\t\treturn (this.props.baseClass || this.className) + selector + \" \";\r\n\t}\r\n\r\n\tgetClassName(): string {\r\n\t\treturn (\r\n\t\t\t(this.props.baseClass || this.className) + \" \" + (this.props.className ? this.props.className + \" \" : \"\")\r\n\t\t);\r\n\t}\r\n\r\n\tgetProps(): any {\r\n\t\treturn {\r\n\t\t\t...((this.props.extraProps as any) || {}),\r\n\t\t\tclassName: this.getClassName()\r\n\t\t};\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport * as _ from \"lodash\";\r\nimport { LinkLayerWidget } from \"./layers/LinkLayerWidget\";\r\nimport { NodeLayerWidget } from \"./layers/NodeLayerWidget\";\r\nimport { Toolkit } from \"../Toolkit\";\r\nimport { BaseAction } from \"../actions/BaseAction\";\r\nimport { MoveCanvasAction } from \"../actions/MoveCanvasAction\";\r\nimport { MoveItemsAction } from \"../actions/MoveItemsAction\";\r\nimport { SelectingAction } from \"../actions/SelectingAction\";\r\nimport { NodeModel } from \"../models/NodeModel\";\r\nimport { PointModel } from \"../models/PointModel\";\r\nimport { PortModel } from \"../models/PortModel\";\r\nimport { LinkModel } from \"../models/LinkModel\";\r\nimport { SelectionModel } from \"../models/SelectionModel\";\r\nimport { BaseModel, BaseModelListener } from \"../models/BaseModel\";\r\nimport { BaseEntity } from \"../BaseEntity\";\r\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\r\n\r\nexport interface DiagramProps extends BaseWidgetProps {\r\n\tdiagramEngine: DiagramEngine;\r\n\tscrollSensitivity?: number;\r\n\r\n\tallowLooseLinks?: boolean;\r\n\tallowCanvasTranslation?: boolean;\r\n\tallowCanvasZoom?: boolean;\r\n\tinverseZoom?: boolean;\r\n\tmaxNumberPointsPerLink?: number;\r\n\tsmartRouting?: boolean;\r\n\r\n\tactionStartedFiring?: (action: BaseAction) => boolean;\r\n\tactionStillFiring?: (action: BaseAction) => void;\r\n\tactionStoppedFiring?: (action: BaseAction) => void;\r\n\r\n\tdeleteKeys?: number[];\r\n}\r\n\r\nexport interface DiagramState {\r\n\taction: BaseAction | null;\r\n\twasMoved: boolean;\r\n\trenderedNodes: boolean;\r\n\twindowListener: any;\r\n\tdiagramEngineListener: any;\r\n\tdocument: any;\r\n}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DiagramWidget extends BaseWidget<DiagramProps, DiagramState> {\r\n\tpublic static defaultProps: DiagramProps = {\r\n\t\tdiagramEngine: null,\r\n\t\tallowLooseLinks: true,\r\n\t\tallowCanvasTranslation: true,\r\n\t\tallowCanvasZoom: true,\r\n\t\tinverseZoom: false,\r\n\t\tmaxNumberPointsPerLink: Infinity, // backwards compatible default\r\n\t\tsmartRouting: false,\r\n\t\tdeleteKeys: [46, 8],\r\n\t\tscrollSensitivity: 0.2\r\n\t};\r\n\r\n\tonKeyUpPointer: (this: Window, ev: KeyboardEvent) => void = null;\r\n\r\n\tconstructor(props: DiagramProps) {\r\n\t\tsuper(\"srd-diagram\", props);\r\n\t\tthis.onMouseMove = this.onMouseMove.bind(this);\r\n\t\tthis.onMouseUp = this.onMouseUp.bind(this);\r\n\t\tthis.state = {\r\n\t\t\taction: null,\r\n\t\t\twasMoved: false,\r\n\t\t\trenderedNodes: false,\r\n\t\t\twindowListener: null,\r\n\t\t\tdiagramEngineListener: null,\r\n\t\t\tdocument: null\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.props.diagramEngine.removeListener(this.state.diagramEngineListener);\r\n\t\tthis.props.diagramEngine.setCanvas(null);\r\n\t\twindow.removeEventListener(\"keyup\", this.onKeyUpPointer);\r\n\t\twindow.removeEventListener(\"mouseUp\", this.onMouseUp);\r\n\t\twindow.removeEventListener(\"mouseMove\", this.onMouseMove);\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps: DiagramProps) {\r\n\t\tif (this.props.diagramEngine !== nextProps.diagramEngine) {\r\n\t\t\tthis.props.diagramEngine.removeListener(this.state.diagramEngineListener);\r\n\t\t\tconst diagramEngineListener = nextProps.diagramEngine.addListener({\r\n\t\t\t\trepaintCanvas: () => this.forceUpdate()\r\n\t\t\t});\r\n\t\t\tthis.setState({ diagramEngineListener });\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUpdate(nextProps: DiagramProps) {\r\n\t\tif (this.props.diagramEngine.diagramModel.id !== nextProps.diagramEngine.diagramModel.id) {\r\n\t\t\tthis.setState({ renderedNodes: false });\r\n\t\t\tnextProps.diagramEngine.diagramModel.rendered = true;\r\n\t\t}\r\n\t\tif (!nextProps.diagramEngine.diagramModel.rendered) {\r\n\t\t\tthis.setState({ renderedNodes: false });\r\n\t\t\tnextProps.diagramEngine.diagramModel.rendered = true;\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tif (!this.state.renderedNodes) {\r\n\t\t\tthis.setState({\r\n\t\t\t\trenderedNodes: true\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.onKeyUpPointer = this.onKeyUp.bind(this);\r\n\r\n\t\t//add a keyboard listener\r\n\t\tthis.setState({\r\n\t\t\tdocument: document,\r\n\t\t\trenderedNodes: true,\r\n\t\t\tdiagramEngineListener: this.props.diagramEngine.addListener({\r\n\t\t\t\trepaintCanvas: () => {\r\n\t\t\t\t\tthis.forceUpdate();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\twindow.addEventListener(\"keyup\", this.onKeyUpPointer, false);\r\n\r\n\t\t// dont focus the window when in test mode - jsdom fails\r\n\t\tif (process.env.NODE_ENV !== \"test\") {\r\n\t\t\twindow.focus();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a model and element under the mouse cursor\r\n\t */\r\n\tgetMouseElement(event): { model: BaseModel<BaseEntity, BaseModelListener>; element: Element } {\r\n\t\tvar target = event.target as Element;\r\n\t\tvar diagramModel = this.props.diagramEngine.diagramModel;\r\n\r\n\t\t//is it a port\r\n\t\tvar element = Toolkit.closest(target, \".port[data-name]\");\r\n\t\tif (element) {\r\n\t\t\tvar nodeElement = Toolkit.closest(target, \".node[data-nodeid]\") as HTMLElement;\r\n\t\t\treturn {\r\n\t\t\t\tmodel: diagramModel\r\n\t\t\t\t\t.getNode(nodeElement.getAttribute(\"data-nodeid\"))\r\n\t\t\t\t\t.getPort(element.getAttribute(\"data-name\")),\r\n\t\t\t\telement: element\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t//look for a point\r\n\t\telement = Toolkit.closest(target, \".point[data-id]\");\r\n\t\tif (element) {\r\n\t\t\treturn {\r\n\t\t\t\tmodel: diagramModel\r\n\t\t\t\t\t.getLink(element.getAttribute(\"data-linkid\"))\r\n\t\t\t\t\t.getPointModel(element.getAttribute(\"data-id\")),\r\n\t\t\t\telement: element\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t//look for a link\r\n\t\telement = Toolkit.closest(target, \"[data-linkid]\");\r\n\t\tif (element) {\r\n\t\t\treturn {\r\n\t\t\t\tmodel: diagramModel.getLink(element.getAttribute(\"data-linkid\")),\r\n\t\t\t\telement: element\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t//look for a node\r\n\t\telement = Toolkit.closest(target, \".node[data-nodeid]\");\r\n\t\tif (element) {\r\n\t\t\treturn {\r\n\t\t\t\tmodel: diagramModel.getNode(element.getAttribute(\"data-nodeid\")),\r\n\t\t\t\telement: element\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfireAction() {\r\n\t\tif (this.state.action && this.props.actionStillFiring) {\r\n\t\t\tthis.props.actionStillFiring(this.state.action);\r\n\t\t}\r\n\t}\r\n\r\n\tstopFiringAction(shouldSkipEvent?: boolean) {\r\n\t\tif (this.props.actionStoppedFiring && !shouldSkipEvent) {\r\n\t\t\tthis.props.actionStoppedFiring(this.state.action);\r\n\t\t}\r\n\t\tthis.setState({ action: null });\r\n\t}\r\n\r\n\tstartFiringAction(action: BaseAction) {\r\n\t\tvar setState = true;\r\n\t\tif (this.props.actionStartedFiring) {\r\n\t\t\tsetState = this.props.actionStartedFiring(action);\r\n\t\t}\r\n\t\tif (setState) {\r\n\t\t\tthis.setState({ action: action });\r\n\t\t}\r\n\t}\r\n\r\n\tonMouseMove(event) {\r\n\t\tvar diagramEngine = this.props.diagramEngine;\r\n\t\tvar diagramModel = diagramEngine.getDiagramModel();\r\n\t\t//select items so draw a bounding box\r\n\t\tif (this.state.action instanceof SelectingAction) {\r\n\t\t\tvar relative = diagramEngine.getRelativePoint(event.clientX, event.clientY);\r\n\r\n\t\t\t_.forEach(diagramModel.getNodes(), node => {\r\n\t\t\t\tif ((this.state.action as SelectingAction).containsElement(node.x, node.y, diagramModel)) {\r\n\t\t\t\t\tnode.setSelected(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t_.forEach(diagramModel.getLinks(), link => {\r\n\t\t\t\tvar allSelected = true;\r\n\t\t\t\t_.forEach(link.points, point => {\r\n\t\t\t\t\tif ((this.state.action as SelectingAction).containsElement(point.x, point.y, diagramModel)) {\r\n\t\t\t\t\t\tpoint.setSelected(true);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tallSelected = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (allSelected) {\r\n\t\t\t\t\tlink.setSelected(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.state.action.mouseX2 = relative.x;\r\n\t\t\tthis.state.action.mouseY2 = relative.y;\r\n\r\n\t\t\tthis.fireAction();\r\n\t\t\tthis.setState({ action: this.state.action });\r\n\t\t\treturn;\r\n\t\t} else if (this.state.action instanceof MoveItemsAction) {\r\n\t\t\tlet amountX = event.clientX - this.state.action.mouseX;\r\n\t\t\tlet amountY = event.clientY - this.state.action.mouseY;\r\n\t\t\tlet amountZoom = diagramModel.getZoomLevel() / 100;\r\n\r\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\r\n\t\t\t\t// in this case we need to also work out the relative grid position\r\n\t\t\t\tif (\r\n\t\t\t\t\tmodel.model instanceof NodeModel ||\r\n\t\t\t\t\t(model.model instanceof PointModel && !model.model.isConnectedToPort())\r\n\t\t\t\t) {\r\n\t\t\t\t\tmodel.model.x = diagramModel.getGridPosition(model.initialX + amountX / amountZoom);\r\n\t\t\t\t\tmodel.model.y = diagramModel.getGridPosition(model.initialY + amountY / amountZoom);\r\n\r\n\t\t\t\t\tif (model.model instanceof NodeModel) {\r\n\t\t\t\t\t\tmodel.model.positionChanged();\r\n\r\n\t\t\t\t\t\t// update port coordinates as well\r\n\t\t\t\t\t\t_.forEach(model.model.getPorts(), port => {\r\n\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(port);\r\n\t\t\t\t\t\t\tport.updateCoords(portCoords);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (diagramEngine.isSmartRoutingEnabled()) {\r\n\t\t\t\t\t\tdiagramEngine.calculateRoutingMatrix();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (model.model instanceof PointModel) {\r\n\t\t\t\t\t// we want points that are connected to ports, to not necessarily snap to grid\r\n\t\t\t\t\t// this stuff needs to be pixel perfect, dont touch it\r\n\t\t\t\t\tmodel.model.x = model.initialX + diagramModel.getGridPosition(amountX / amountZoom);\r\n\t\t\t\t\tmodel.model.y = model.initialY + diagramModel.getGridPosition(amountY / amountZoom);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (diagramEngine.isSmartRoutingEnabled()) {\r\n\t\t\t\tdiagramEngine.calculateCanvasMatrix();\r\n\t\t\t}\r\n\r\n\t\t\tthis.fireAction();\r\n\t\t\tif (!this.state.wasMoved) {\r\n\t\t\t\tthis.setState({ wasMoved: true });\r\n\t\t\t} else {\r\n\t\t\t\tthis.forceUpdate();\r\n\t\t\t}\r\n\t\t} else if (this.state.action instanceof MoveCanvasAction) {\r\n\t\t\t//translate the actual canvas\r\n\t\t\tif (this.props.allowCanvasTranslation) {\r\n\t\t\t\tdiagramModel.setOffset(\r\n\t\t\t\t\tthis.state.action.initialOffsetX + (event.clientX - this.state.action.mouseX),\r\n\t\t\t\t\tthis.state.action.initialOffsetY + (event.clientY - this.state.action.mouseY)\r\n\t\t\t\t);\r\n\t\t\t\tthis.fireAction();\r\n\t\t\t\tthis.forceUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonKeyUp(event) {\r\n\t\t//delete all selected\r\n\t\tif (this.props.deleteKeys.indexOf(event.keyCode) !== -1) {\r\n\t\t\t_.forEach(this.props.diagramEngine.getDiagramModel().getSelectedItems(), element => {\r\n\t\t\t\t//only delete items which are not locked\r\n\t\t\t\tif (!this.props.diagramEngine.isModelLocked(element)) {\r\n\t\t\t\t\telement.remove();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.forceUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\tonMouseUp(event) {\r\n\t\tvar diagramEngine = this.props.diagramEngine;\r\n\t\t//are we going to connect a link to something?\r\n\t\tif (this.state.action instanceof MoveItemsAction) {\r\n\t\t\tvar element = this.getMouseElement(event);\r\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\r\n\t\t\t\t//only care about points connecting to things\r\n\t\t\t\tif (!(model.model instanceof PointModel)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (element && element.model instanceof PortModel && !diagramEngine.isModelLocked(element.model)) {\r\n\t\t\t\t\tlet link = model.model.getLink();\r\n\t\t\t\t\tif (link.getTargetPort() !== null) {\r\n\t\t\t\t\t\t//if this was a valid link already and we are adding a node in the middle, create 2 links from the original\r\n\t\t\t\t\t\tif (link.getTargetPort() !== element.model && link.getSourcePort() !== element.model) {\r\n\t\t\t\t\t\t\tconst targetPort = link.getTargetPort();\r\n\t\t\t\t\t\t\tlet newLink = link.clone({});\r\n\t\t\t\t\t\t\tnewLink.setSourcePort(element.model);\r\n\t\t\t\t\t\t\tnewLink.setTargetPort(targetPort);\r\n\t\t\t\t\t\t\tlink.setTargetPort(element.model);\r\n\t\t\t\t\t\t\ttargetPort.removeLink(link);\r\n\t\t\t\t\t\t\tnewLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]);\r\n\t\t\t\t\t\t\tlink.removePointsAfter(model.model);\r\n\t\t\t\t\t\t\tdiagramEngine.getDiagramModel().addLink(newLink);\r\n\t\t\t\t\t\t\t//if we are connecting to the same target or source, remove tweener points\r\n\t\t\t\t\t\t} else if (link.getTargetPort() === element.model) {\r\n\t\t\t\t\t\t\tlink.removePointsAfter(model.model);\r\n\t\t\t\t\t\t} else if (link.getSourcePort() === element.model) {\r\n\t\t\t\t\t\t\tlink.removePointsBefore(model.model);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlink.setTargetPort(element.model);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this.props.diagramEngine.linksThatHaveInitiallyRendered[link.getID()];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t//check for / remove any loose links in any models which have been moved\r\n\t\t\tif (!this.props.allowLooseLinks && this.state.wasMoved) {\r\n\t\t\t\t_.forEach(this.state.action.selectionModels, model => {\r\n\t\t\t\t\t//only care about points connecting to things\r\n\t\t\t\t\tif (!(model.model instanceof PointModel)) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet selectedPoint: PointModel = model.model;\r\n\t\t\t\t\tlet link: LinkModel = selectedPoint.getLink();\r\n\t\t\t\t\tif (link.getSourcePort() === null || link.getTargetPort() === null) {\r\n\t\t\t\t\t\tlink.remove();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t//remove any invalid links\r\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\r\n\t\t\t\t//only care about points connecting to things\r\n\t\t\t\tif (!(model.model instanceof PointModel)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet link: LinkModel = model.model.getLink();\r\n\t\t\t\tlet sourcePort: PortModel = link.getSourcePort();\r\n\t\t\t\tlet targetPort: PortModel = link.getTargetPort();\r\n\t\t\t\tif (sourcePort !== null && targetPort !== null) {\r\n\t\t\t\t\tif (!sourcePort.canLinkToPort(targetPort)) {\r\n\t\t\t\t\t\t//link not allowed\r\n\t\t\t\t\t\tlink.remove();\r\n\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t_.some(\r\n\t\t\t\t\t\t\t_.values(targetPort.getLinks()),\r\n\t\t\t\t\t\t\t(l: LinkModel) =>\r\n\t\t\t\t\t\t\t\tl !== link && (l.getSourcePort() === sourcePort || l.getTargetPort() === sourcePort)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t//link is a duplicate\r\n\t\t\t\t\t\tlink.remove();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tdiagramEngine.clearRepaintEntities();\r\n\t\t\tthis.stopFiringAction(!this.state.wasMoved);\r\n\t\t} else {\r\n\t\t\tdiagramEngine.clearRepaintEntities();\r\n\t\t\tthis.stopFiringAction();\r\n\t\t}\r\n\t\tthis.state.document.removeEventListener(\"mousemove\", this.onMouseMove);\r\n\t\tthis.state.document.removeEventListener(\"mouseup\", this.onMouseUp);\r\n\t}\r\n\r\n\tdrawSelectionBox() {\r\n\t\tlet dimensions = (this.state.action as SelectingAction).getBoxDimensions();\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={this.bem(\"__selector\")}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\ttop: dimensions.top,\r\n\t\t\t\t\tleft: dimensions.left,\r\n\t\t\t\t\twidth: dimensions.width,\r\n\t\t\t\t\theight: dimensions.height\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\tvar diagramEngine = this.props.diagramEngine;\r\n\t\tdiagramEngine.setMaxNumberPointsPerLink(this.props.maxNumberPointsPerLink);\r\n\t\tdiagramEngine.setSmartRoutingStatus(this.props.smartRouting);\r\n\t\tvar diagramModel = diagramEngine.getDiagramModel();\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\t{...this.getProps()}\r\n\t\t\t\tref={ref => {\r\n\t\t\t\t\tif (ref) {\r\n\t\t\t\t\t\tthis.props.diagramEngine.setCanvas(ref);\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t\tonWheel={event => {\r\n\t\t\t\t\tif (this.props.allowCanvasZoom) {\r\n\t\t\t\t\t\t// event.preventDefault();\r\n\t\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t\t\tconst oldZoomFactor = diagramModel.getZoomLevel() / 100;\r\n\r\n\t\t\t\t\t\tlet scrollDelta = this.props.scrollSensitivity*(this.props.inverseZoom ? -event.deltaY : event.deltaY)/Math.abs(event.deltaY);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst newZoomLevel = diagramModel.getZoomLevel() + (diagramModel.getZoomLevel()/2 * (scrollDelta));\r\n\t\t\t\t\t\tif (newZoomLevel > 20 && newZoomLevel < 500) {\r\n\t\t\t\t\t\t\tdiagramModel.setZoomLevel(newZoomLevel);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst zoomFactor = diagramModel.getZoomLevel() / 100;\r\n\r\n\t\t\t\t\t\tconst boundingRect = event.currentTarget.getBoundingClientRect();\r\n\t\t\t\t\t\tconst clientWidth = boundingRect.width;\r\n\t\t\t\t\t\tconst clientHeight = boundingRect.height;\r\n\t\t\t\t\t\t// compute difference between rect before and after scroll\r\n\t\t\t\t\t\tconst widthDiff = clientWidth * zoomFactor - clientWidth * oldZoomFactor;\r\n\t\t\t\t\t\tconst heightDiff = clientHeight * zoomFactor - clientHeight * oldZoomFactor;\r\n\t\t\t\t\t\t// compute mouse coords relative to canvas\r\n\t\t\t\t\t\tconst clientX = event.clientX - boundingRect.left;\r\n\t\t\t\t\t\tconst clientY = event.clientY - boundingRect.top;\r\n\r\n\t\t\t\t\t\t// compute width and height increment factor\r\n\t\t\t\t\t\tconst xFactor = (clientX - diagramModel.getOffsetX()) / oldZoomFactor / clientWidth;\r\n\t\t\t\t\t\tconst yFactor = (clientY - diagramModel.getOffsetY()) / oldZoomFactor / clientHeight;\r\n\r\n\t\t\t\t\t\tdiagramModel.setOffset(\r\n\t\t\t\t\t\t\tdiagramModel.getOffsetX() - widthDiff * xFactor,\r\n\t\t\t\t\t\t\tdiagramModel.getOffsetY() - heightDiff * yFactor\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tdiagramEngine.enableRepaintEntities([]);\r\n\t\t\t\t\t\tthis.forceUpdate();\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t\tonMouseDown={event => {\r\n\t\t\t\t\tif (event.nativeEvent.which === 3) return;\r\n\t\t\t\t\tthis.setState({ ...this.state, wasMoved: false });\r\n\r\n\t\t\t\t\tdiagramEngine.clearRepaintEntities();\r\n\t\t\t\t\tvar model = this.getMouseElement(event);\r\n\t\t\t\t\t//the canvas was selected\r\n\t\t\t\t\tif (model === null) {\r\n\t\t\t\t\t\t//is it a multiple selection\r\n\t\t\t\t\t\tif (event.shiftKey) {\r\n\t\t\t\t\t\t\tvar relative = diagramEngine.getRelativePoint(event.clientX, event.clientY);\r\n\t\t\t\t\t\t\tthis.startFiringAction(new SelectingAction(relative.x, relative.y));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//its a drag the canvas event\r\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\r\n\t\t\t\t\t\t\tthis.startFiringAction(new MoveCanvasAction(event.clientX, event.clientY, diagramModel));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (model.model instanceof PortModel) {\r\n\t\t\t\t\t\t//its a port element, we want to drag a link\r\n\t\t\t\t\t\tif (!this.props.diagramEngine.isModelLocked(model.model)) {\r\n\t\t\t\t\t\t\tvar relative = diagramEngine.getRelativeMousePoint(event);\r\n\t\t\t\t\t\t\tvar sourcePort = model.model;\r\n\t\t\t\t\t\t\tvar link = sourcePort.createLinkModel();\r\n\t\t\t\t\t\t\tlink.setSourcePort(sourcePort);\r\n\r\n\t\t\t\t\t\t\tif (link) {\r\n\t\t\t\t\t\t\t\tlink.removeMiddlePoints();\r\n\t\t\t\t\t\t\t\tif (link.getSourcePort() !== sourcePort) {\r\n\t\t\t\t\t\t\t\t\tlink.setSourcePort(sourcePort);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlink.setTargetPort(null);\r\n\r\n\t\t\t\t\t\t\t\tlink.getFirstPoint().updateLocation(relative);\r\n\t\t\t\t\t\t\t\tlink.getLastPoint().updateLocation(relative);\r\n\r\n\t\t\t\t\t\t\t\tdiagramModel.clearSelection();\r\n\t\t\t\t\t\t\t\tlink.getLastPoint().setSelected(true);\r\n\t\t\t\t\t\t\t\tdiagramModel.addLink(link);\r\n\r\n\t\t\t\t\t\t\t\tthis.startFiringAction(\r\n\t\t\t\t\t\t\t\t\tnew MoveItemsAction(event.clientX, event.clientY, diagramEngine)\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//its some or other element, probably want to move it\r\n\t\t\t\t\t\tif (!event.shiftKey && !model.model.isSelected()) {\r\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmodel.model.setSelected(true);\r\n\r\n\t\t\t\t\t\tthis.startFiringAction(new MoveItemsAction(event.clientX, event.clientY, diagramEngine));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.state.document.addEventListener(\"mousemove\", this.onMouseMove);\r\n\t\t\t\t\tthis.state.document.addEventListener(\"mouseup\", this.onMouseUp);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{this.state.renderedNodes && (\r\n\t\t\t\t\t<LinkLayerWidget\r\n\t\t\t\t\t\tdiagramEngine={diagramEngine}\r\n\t\t\t\t\t\tpointAdded={(point: PointModel, event) => {\r\n\t\t\t\t\t\t\tthis.state.document.addEventListener(\"mousemove\", this.onMouseMove);\r\n\t\t\t\t\t\t\tthis.state.document.addEventListener(\"mouseup\", this.onMouseUp);\r\n\t\t\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t\t\t\tdiagramModel.clearSelection(point);\r\n\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\taction: new MoveItemsAction(event.clientX, event.clientY, diagramEngine)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\t<NodeLayerWidget diagramEngine={diagramEngine} />\r\n\t\t\t\t{this.state.action instanceof SelectingAction && this.drawSelectionBox()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { LinkModel } from \"../models/LinkModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\r\n\r\nexport interface LinkProps extends BaseWidgetProps {\r\n\tlink: LinkModel;\r\n\tdiagramEngine: DiagramEngine;\r\n\tchildren?: any;\r\n}\r\n\r\nexport interface LinkState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class LinkWidget extends BaseWidget<LinkProps, LinkState> {\r\n\tconstructor(props: LinkProps) {\r\n\t\tsuper(\"srd-link\", props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\tshouldComponentUpdate() {\r\n\t\treturn this.props.diagramEngine.canEntityRepaint(this.props.link);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { NodeModel } from \"../models/NodeModel\";\r\nimport { Toolkit } from \"../Toolkit\";\r\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\r\n\r\nexport interface NodeProps extends BaseWidgetProps {\r\n\tnode: NodeModel;\r\n\tchildren?: any;\r\n\tdiagramEngine: DiagramEngine;\r\n}\r\n\r\nexport interface NodeState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class NodeWidget extends BaseWidget<NodeProps, NodeState> {\r\n\tconstructor(props: NodeProps) {\r\n\t\tsuper(\"srd-node\", props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\tshouldComponentUpdate() {\r\n\t\treturn this.props.diagramEngine.canEntityRepaint(this.props.node);\r\n\t}\r\n\r\n\tgetClassName() {\r\n\t\treturn \"node \" + super.getClassName() + (this.props.node.isSelected() ? this.bem(\"--selected\") : \"\");\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\t{...this.getProps()}\r\n\t\t\t\tdata-nodeid={this.props.node.id}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\ttop: this.props.node.y,\r\n\t\t\t\t\tleft: this.props.node.x\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{this.props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { NodeModel } from \"../models/NodeModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\r\n\r\nexport interface PortProps extends BaseWidgetProps {\r\n\tname: string;\r\n\tnode: NodeModel;\r\n}\r\n\r\nexport interface PortState {\r\n\tselected: boolean;\r\n}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class PortWidget extends BaseWidget<PortProps, PortState> {\r\n\tconstructor(props: PortProps) {\r\n\t\tsuper(\"srd-port\", props);\r\n\t\tthis.state = {\r\n\t\t\tselected: false\r\n\t\t};\r\n\t}\r\n\r\n\tgetClassName() {\r\n\t\treturn \"port \" + super.getClassName() + (this.state.selected ? this.bem(\"--selected\") : \"\");\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\t{...this.getProps()}\r\n\t\t\t\tonMouseEnter={() => {\r\n\t\t\t\t\tthis.setState({ selected: true });\r\n\t\t\t\t}}\r\n\t\t\t\tonMouseLeave={() => {\r\n\t\t\t\t\tthis.setState({ selected: false });\r\n\t\t\t\t}}\r\n\t\t\t\tdata-name={this.props.name}\r\n\t\t\t\tdata-nodeid={this.props.node.getID()}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { LinkWidget } from \"../LinkWidget\";\r\nimport * as _ from \"lodash\";\r\nimport { PointModel } from \"../../models/PointModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../BaseWidget\";\r\n\r\nexport interface LinkLayerProps extends BaseWidgetProps {\r\n\tdiagramEngine: DiagramEngine;\r\n\tpointAdded: (point: PointModel, event: MouseEvent) => any;\r\n}\r\n\r\nexport interface LinkLayerState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class LinkLayerWidget extends BaseWidget<LinkLayerProps, LinkLayerState> {\r\n\tconstructor(props: LinkLayerProps) {\r\n\t\tsuper(\"srd-link-layer\", props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\trender() {\r\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\r\n\t\treturn (\r\n\t\t\t<svg\r\n\t\t\t\t{...this.getProps()}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\ttransform:\r\n\t\t\t\t\t\t\"translate(\" +\r\n\t\t\t\t\t\tdiagramModel.getOffsetX() +\r\n\t\t\t\t\t\t\"px,\" +\r\n\t\t\t\t\t\tdiagramModel.getOffsetY() +\r\n\t\t\t\t\t\t\"px) scale(\" +\r\n\t\t\t\t\t\tdiagramModel.getZoomLevel() / 100.0 +\r\n\t\t\t\t\t\t\")\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{//only perform these actions when we have a diagram\r\n\t\t\t\tthis.props.diagramEngine.canvas &&\r\n\t\t\t\t\t_.map(diagramModel.getLinks(), link => {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tthis.props.diagramEngine.nodesRendered &&\r\n\t\t\t\t\t\t\t!this.props.diagramEngine.linksThatHaveInitiallyRendered[link.id]\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tif (link.sourcePort !== null) {\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tconst portCenter = this.props.diagramEngine.getPortCenter(link.sourcePort);\r\n\t\t\t\t\t\t\t\t\tlink.points[0].updateLocation(portCenter);\r\n\r\n\t\t\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(link.sourcePort);\r\n\t\t\t\t\t\t\t\t\tlink.sourcePort.updateCoords(portCoords);\r\n\r\n\t\t\t\t\t\t\t\t\tthis.props.diagramEngine.linksThatHaveInitiallyRendered[link.id] = true;\r\n\t\t\t\t\t\t\t\t} catch (ignore) {\r\n\t\t\t\t\t\t\t\t\t/*noop*/\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (link.targetPort !== null) {\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tconst portCenter = this.props.diagramEngine.getPortCenter(link.targetPort);\r\n\t\t\t\t\t\t\t\t\t_.last(link.points).updateLocation(portCenter);\r\n\r\n\t\t\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(link.targetPort);\r\n\t\t\t\t\t\t\t\t\tlink.targetPort.updateCoords(portCoords);\r\n\r\n\t\t\t\t\t\t\t\t\tthis.props.diagramEngine.linksThatHaveInitiallyRendered[link.id] = true;\r\n\t\t\t\t\t\t\t\t} catch (ignore) {\r\n\t\t\t\t\t\t\t\t\t/*noop*/\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//generate links\r\n\t\t\t\t\t\tvar generatedLink = this.props.diagramEngine.generateWidgetForLink(link);\r\n\t\t\t\t\t\tif (!generatedLink) {\r\n\t\t\t\t\t\t\tthrow new Error(`no link generated for type: ${link.getType()}`);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<LinkWidget key={link.getID()} link={link} diagramEngine={this.props.diagramEngine}>\r\n\t\t\t\t\t\t\t\t{React.cloneElement(generatedLink, {\r\n\t\t\t\t\t\t\t\t\tpointAdded: this.props.pointAdded\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</LinkWidget>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t</svg>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport * as _ from \"lodash\";\r\nimport { NodeWidget } from \"../NodeWidget\";\r\nimport { NodeModel } from \"../../models/NodeModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../BaseWidget\";\r\n\r\nexport interface NodeLayerProps extends BaseWidgetProps {\r\n\tdiagramEngine: DiagramEngine;\r\n}\r\n\r\nexport interface NodeLayerState {}\r\n\r\nexport class NodeLayerWidget extends BaseWidget<NodeLayerProps, NodeLayerState> {\r\n\tconstructor(props: NodeLayerProps) {\r\n\t\tsuper(\"srd-node-layer\", props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\tupdateNodeDimensions = () => {\r\n\t\tif (!this.props.diagramEngine.nodesRendered) {\r\n\t\t\tconst diagramModel = this.props.diagramEngine.getDiagramModel();\r\n\t\t\t_.map(diagramModel.getNodes(), node => {\r\n\t\t\t\tnode.updateDimensions(this.props.diagramEngine.getNodeDimensions(node));\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tthis.updateNodeDimensions();\r\n\t\tthis.props.diagramEngine.nodesRendered = true;\r\n\t}\r\n\r\n\trender() {\r\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\t{...this.getProps()}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\ttransform:\r\n\t\t\t\t\t\t\"translate(\" +\r\n\t\t\t\t\t\tdiagramModel.getOffsetX() +\r\n\t\t\t\t\t\t\"px,\" +\r\n\t\t\t\t\t\tdiagramModel.getOffsetY() +\r\n\t\t\t\t\t\t\"px) scale(\" +\r\n\t\t\t\t\t\tdiagramModel.getZoomLevel() / 100.0 +\r\n\t\t\t\t\t\t\")\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{_.map(diagramModel.getNodes(), (node: NodeModel) => {\r\n\t\t\t\t\treturn React.createElement(\r\n\t\t\t\t\t\tNodeWidget,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdiagramEngine: this.props.diagramEngine,\r\n\t\t\t\t\t\t\tkey: node.id,\r\n\t\t\t\t\t\t\tnode: node\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tthis.props.diagramEngine.generateWidgetForNode(node)\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","module.exports = require(\"closest\");","module.exports = require(\"lodash\");","module.exports = require(\"pathfinding\");","module.exports = require(\"paths-js/path\");","module.exports = require(\"react\");"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClFA;AACA;AAmBA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9FA;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AAEA;AACA;AAgBA;;AAEA;AACA;AAqBA;AACA;AARA;AACA;AACA;AACA;AACA;AACA;AAwZA;;;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAIA;AAEA;AAGA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAhgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AAQA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAgHA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAliBA;;;;;;;;;;;;;;;ACpCA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAIA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA9DA;AACA;AAFA;;;;;;;;;;;;;;;ACRA;AAKA;AACA;AACA;AACA;AACA;AACA;AAVA;;;;;;;;;;;;;;;ACAA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AATA;;;;;;;;;;;;;;;ACHA;AAMA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;;;;;;;;;;;;;;;ACNA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAhCA;;;;;;;;;;;;;;;ACHA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAZA;;;;;;;;;;;;;;;ACTA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AACA;AA1BA;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;;;;ACRA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AARA;;;;;;;;;;;;;;;ACHA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAtBA;;;;;;;;;;;;;;;ACJA;;AAEA;AACA;AAEA;AAGA;AACA;AAQA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;;;;;;;;;;;;;;;ACjBA;AACA;AAEA;AACA;AAGA;;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA3CA;;;;;;;;;;;;;;;ACVA;AACA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA1CA;;;;;;;;;;;;;;;ACNA;AAEA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AARA;;;;;;;;;;;;;;;ACRA;AAEA;AACA;AAGA;AACA;AAEA;AAeA;AAgBA;AACA;AA+BA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAmGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AA5LA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAgBA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAWA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AAIA;AAEA;AACA;AAEA;AAQA;AACA;AAGA;AAIA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAGA;AAoDA;;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;;AA7VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;;;;;;;;ACxBA;AACA;AAEA;AAEA;AASA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAMA;AACA;AA3BA;;;;;;;;;;;;;;;ACjBA;AAEA;AACA;AAQA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AApBA;;;;;;;;;;;;;;;ACZA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAZA;;;;;;;;;;;;;;;ACAA;AAEA;AAEA;AAFA;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAFA;;;;;;;;;;;;;;;ACFA;AAEA;AAEA;AAFA;;;;;;;;;;;;;;;ACFA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;ACJA;;AAEA;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;ACpDA;AACA;AAWA;;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtEA;;;;;;;;;;;;;;;ACfA;AACA;AAEA;AACA;AACA;AAEA;AAixRA;;;;;;;;;;;;;;;AC3BA;AAEA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;;;;;;;;;;;;;;;ACLA;AAEA;AACA;AAYA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA5NA;;;;;;;;;;;;;;;ACdpIA;;;;;;;;;;;;;;;ACbA;AAEA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AA/DA;;;;;;;;;;;;;;;ACLA;AAGA;AAGA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AA9FA;;;;;;;;;;;;;;;ACNA;AAGA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAUA;AACA;AAEA;AAOA;AAEA;;;;AAIA;AACA;AAeA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArHA;;;;;;;;;;;;;;;ACfA;AAmBA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAIA;AACA;AAxBA;;;;;;;;;;;;;;;ACnBA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AA6BA;;AAEA;AACA;AAeA;AACA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;;AApfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;;AC9CA;AAUA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAbA;;;;;;;;;;;;;;;AChBA;AAIA;AAUA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAKA;AACA;AA5BA;;;;;;;;;;;;;;;ACjBA;AAEA;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAKA;AACA;AA3BA;;;;;;;;;;;;;;;AChBA;AAEA;AACA;AAEA;AASA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AAGA;AACA;AA1EA;;;;;;;;;;;;;;;ACjBA;AAEA;AACA;AAEA;AAQA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAlDA;;;;;;;;;;;;ACbA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;A","sourceRoot":""}